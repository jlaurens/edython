// This file was generated by "prepare.py" on 2020-09-10 16:16:45.904705

describe(`Inline tests at widget/widget.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
//  /**
//   * @fileoverview Object with data, slots or fields.
//   * @author jerome.laurens@u-bourgogne.fr (Jérôme LAURENS)
//   */
//  'use strict'
//  
//  eYo.require('dlgt')
//  
//  /**
//   * Ancestor of object owning data, fields and slots.
//   * @name {eYo.driven}
//   * @namespace
//   */
//  eYo.o4t.newNS(eYo, 'driven', {
//    MODIFIER: 'modifier', // this MUST be in lower case
//    PREFIX: 'prefix', // lowercase
//    LABEL: 'label', // lowercase
//    SEPARATOR: 'separator', // lowercase
//    START: 'start', // lowercase
//    OPERATOR: 'operator', // lowercase
//    END: 'end', // lowercase
//    SUFFIX: 'suffix', // lowercase
//    COMMENT_MARK: 'comment_mark', // lowercase
//    COMMENT: 'comment', // lowercase
//  })
//  
  it(`Basics`, function () {
    chai.assert(eYo.driven)
    chai.assert(eYo.driven.C9rBase)
    chai.assert(eYo.driven)
    chai.assert(eYo.driven_p)
    chai.assert(eYo.driven$)
  })
//  
//  /**
//   * Class for a basic object indirectly owned by a brick.
//   *
//   * @name {eYo.driven.C9rBase}
//   * @constructor
//   * @param {eYo.brick|eYo.slot.C9rBase|eYo.magnet.C9rBase} owner - the immediate owner of this magnet. When not a brick, it is indirectly owned by a brick.
//   * @readonly
//   * @property {eYo.brick.UI} ui - The ui object used for rendering.
//   * @readonly
//   * @property {eYo.brick.C9rBase} brick - The brick.
//   * @readonly
//   * @property {eYo.slot.C9rBase} slot - The slot.
//   * @readonly
//   * @property {eYo.magnet.C9rBase} magnet - The magnet.
//   */
//  eYo.driven.makeC9rBase({
//    init (key, owner) {
//      this.resetBSM(owner)
//    },
//    aliases: {
  it(`aliases`, function () {
    let ns = eYo.driven.newNS()
    ns.makeC9rBase()
    setup({
      properties: {
        ui: 421,
        drvr: 666,
      },
    })
    var driven = ns.new({}, 'driven', onr)
    chai.expect(driven.brick).equal(onr)
//      'brick.ui': 'ui',
    chai.expect(onr.ui).equal(driven.ui)
    chai.expect(onr.drvr).equal(driven.drvr)
//      'brick.drvr': 'drvr',
  })
//    },
//    properties: {
  it(`properties`, function () {
//      brick: eYo.NA,
//      slot: eYo.NA,
//      magnet: eYo.NA,
  })
//    },
//    methods: {
  describe(`methods`, function () {
//      /**
//       * Reset the brick/slot/magnet properties.
//       * @param {*} owner
//       */
//      resetBSM (owner) {
    it(`resetBSM`, function () {
      let ns = eYo.driven.newNS()
      ns.makeC9rBase()
      var driven = ns.new({}, 'driven', onr)
      chai.expect(driven.brick).equal(onr)
      chai.expect(driven.slot).undefined
      chai.expect(driven.magnet).undefined
//        this.slot_ = this.brick_ = this.magnet_ = eYo.NA
//        if (owner) {
//          if (owner.isSlot) {
      setup({
        properties: {
          brick: 1
        },
      })
      onr.isSlot = true
      driven = ns.new({}, 'driven', onr)
//            this.brick_ = owner.brick
//            this.slot_ = owner
      chai.expect(driven.brick).equal(1)
      chai.expect(driven.slot).equal(onr)
      chai.expect(driven.magnet).undefined
//          } else if (owner.isMagnet) {
      setup({
        properties: {
          brick: 1
        },
      })
      onr.isMagnet = true
      driven = ns.new({}, 'driven', onr)
//            this.magnet_ = owner
//            this.brick_ = owner.brick
      chai.expect(driven.brick).equal(1)
      chai.expect(driven.slot).undefined
      chai.expect(driven.magnet).equal(onr)
//          } else {
//            this.brick_ = owner
      setup()
      driven = ns.new({}, 'driven', onr)
      chai.expect(driven.brick).equal(onr)
      chai.expect(driven.slot).undefined
      chai.expect(driven.magnet).undefined
//          }
//        }
    })
//      },
//      /**
//       * Hook for owner change
//       * @param {Object} before
//       * @param {Object} after
//       */
//      ownerDidChange (before, after) {
    it(`ownerDidChange`, function () {
      let ns = eYo.driven.newNS()
      ns.makeC9rBase()
      eYo.test.extend(ns.C9rBase_p, 'ownerDidChange', function (before, after) {
        eYo.flag.push(421)
      })
      var driven = ns.new({}, 'driven', onr)
      setup()
      driven.owner_ = onr
      eYo.flag.expect(421)
//        let inherited = eYo.driven.C9rBase[eYo.$SuperC9r_p].ownerDidChange
//        inherited && inherited.call(this, before, after)
//        this.resetBSM()
    })
//      },
  })
//    },
//  })
//  

})
