// This file was generated by "update.py" on 2020-09-10 16:22:43.769924

describe(`Inline tests at core/kv/kv.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
//  /**
//   * @fileoverview Managing named function arguments and possibly more.
//   * When using inheritance, some functions may have quite the same set of arguments,
//   * quite...
//   * @author jerome.laurens@u-bourgogne.fr (Jérôme LAURENS)
//   */
//  'use strict'
//  
//  /**
//   * Management of named arguments and possibly more.
//   * @name {eYo.kv}
//   * @namespace
//   */
//  eYo.newNS('kv')
//  
//  /**
//   * Named arguments constructor.
//   * @param {Object} kvargs - an object with named arguments
//   */
//  eYo.kv.C9r = class {
//    constructor (kvargs) {
  it(`constructor`, function () {
    chai.expect(eYo.kv.C9r).eyo_F
//      kvargs && Object.assign(this, kvargs)
    var $ = new eYo.kv.C9r()
    chai.expect($.foo).undefined
    $ = new eYo.kv.C9r({})
    chai.expect($.foo).undefined
    $ = new eYo.kv.C9r({foo: 421})
    chai.expect($.foo).equal(421)
  })
//    }
  it(`mixin`, function () {
//    mixin (kvargs) {
//      Object.assign(this, kvargs)
//    }
    var $ = eYo.kv.new()
    chai.expect($.a).undefined
    $.mixin({a: 1})
    chai.expect($.a).equal(1)
    $.mixin({a: 2})
    chai.expect($.a).equal(2)
    var $$ = eYo.kv.new({b: 2})
    chai.expect($$.b).equal(2)
    $.mixin($$)
    chai.expect($.b).equal(2)
  })
//  }
//  
//  eYo.mixinRO(eYo.kv, {
  it(`eYo.kv.C9r_p`, function () {
//    C9r_p: eYo.kv.C9r.prototype,
    chai.expect(eYo.kv.C9r_p).equal(eYo.kv.C9r.prototype)
  })
//  })
//  
//  eYo.mixinFR(eYo, {
//    /**
//     * Whether the argument is a named arguments object.
//     * @param {*} what
//     */
//    isa$ (what) {
  it(`eYo.isa$`, function () {
//      return !!what && what instanceof eYo.kv.C9r
    chai.expect(eYo.isa$()).false
    chai.expect(eYo.isa$({})).false
    chai.expect(eYo.isa$(new eYo.kv.C9r())).true
    chai.expect(eYo.isa$(eYo.kv.new())).true
  })
//    },
//    KV: eYo.kv.C9r,
//    KV_p: eYo.kv.C9r_p,
  it(`KV/KV_p`, function () {
    chai.expect(eYo.KV).equal(eYo.kv.C9r)
    chai.expect(eYo.KV_p).equal(eYo.kv.C9r_p)
  })
//  })
//  
//  eYo.mixinFR(eYo.kv, {
//    new ($) {
//      return new eYo.KV($)
//    }
//  })
//  

})
