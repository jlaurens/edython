// This file was generated by "update.py" on 2020-04-26 20:23:36.332671

describe(`Inline tests at core/p6y/p6y.js`, function () {
  this.timeout(10000)
  let flag = new eYo.test.Flag()
  let onr = eYo.c9r && eYo.c9r.new('onr')
  before (function() {
    flag.reset()
  })

  describe(`P6y`, function () {
    it(`P6y: readonly value`, function () {
      let p6y = new eYo.p6y.BaseC9r('p', onr)
      chai.expect(() => p6y.value = 0).throw()
    })
    it(`eYo.p6y.BaseC9r_p.validate (before, after)`, function () {
      let onr = new eYo.c9r.BaseC9r({}, 'onr')
      let p6y = new eYo.p6y.BaseC9r('p6y', onr)
      chai.expect(p6y.validate(1, 2)).equal(2)
      onr.p6yValidate = function (before, after) {
        this.do_it(before, after)
        return after
      }
      onr.do_it = function (before, after) {
        flag.push(before, after)
      }
      chai.expect(p6y.validate(1, 2)).equal(2)
      flag.expect(12)
    })
    it(`eYo.p6y.BaseC9r_p.__disposeStored(what, ...$)`, function () {
      var p6y = new eYo.p6y.BaseC9r('p6y', onr)
      what = eYo.c9r.new({
        dispose (...$) {
          flag.push(...$)
        }
      })
      flag.reset()
      what.eyo_p6y = p6y
      p6y.__disposeStored(what, 1, 2, 3)
      flag.expect(123)
      what = []
      p6y.__disposeStored(what, 1, 2, 3)
      flag.expect(0)
      var value_1 = eYo.c9r.new({
        dispose (...$) {
          flag.push(1, ...$)
        }
      })
      value_1.eyo_p6y = p6y
      what = [value_1]
      p6y.__disposeStored(what, 1, 2, 3)
      flag.expect(1123)
      var value_1 = eYo.c9r.new({
        dispose (...$) {
          flag.push(1, ...$)
        }
      })
      value_1.eyo_p6y = p6y
      var value_2 = eYo.c9r.new({
        dispose (...$) {
          flag.push(2, ...$)
        }
      })
      value_2.eyo_p6y = p6y
      what = [value_1, value_2]
      p6y.__disposeStored(what, 1, 2, 3)
      flag.expect(11232123)
      what = new Map([])
      p6y.__disposeStored(what, 1, 2, 3)
      flag.expect(0)
      var value_1 = eYo.c9r.new({
        dispose (...$) {
          flag.push(1, ...$)
        }
      })
      value_1.eyo_p6y = p6y
      what = new Map([[1, value_1]])
      p6y.__disposeStored(what, 1, 2, 3)
      flag.expect(1123)
      var value_1 = eYo.c9r.new({
        dispose (...$) {
          flag.push(1, ...$)
        }
      })
      value_1.eyo_p6y = p6y
      var value_2 = eYo.c9r.new({
        dispose (...$) {
          flag.push(2, ...$)
        }
      })
      value_2.eyo_p6y = p6y
      what = new Map([[1, value_1], [2, value_2]])
      p6y.__disposeStored(what, 1, 2, 3)
      flag.expect(11232123)
      what = {}
      p6y.__disposeStored(what, 1, 2, 3)
      flag.expect(0)
      var value_1 = eYo.c9r.new({
        dispose (...$) {
          flag.push(1, ...$)
        }
      })
      value_1.eyo_p6y = p6y
      what = {'1': value_1}
      p6y.__disposeStored(what, 1, 2, 3)
      flag.expect(1123)
      var value_1 = eYo.c9r.new({
        dispose (...$) {
          flag.push(1, ...$)
        }
      })
      value_1.eyo_p6y = p6y
      var value_2 = eYo.c9r.new({
        dispose (...$) {
          flag.push(2, ...$)
        }
      })
      value_2.eyo_p6y = p6y
      what = {'1': value_1, '2': value_2}
      p6y.__disposeStored(what, 1, 2, 3)
      flag.expect(11232123)
    })
    it(`eYo.p6y.BaseC9r_p.recycle`, function () {
      var p6y = new eYo.p6y.BaseC9r('p6y', onr)
      what = eYo.c9r.new({
        dispose (...$) {
          flag.push(1, ...$)
        }
      })
      flag.reset()
      p6y.value_ = what
      chai.expect(p6y.value).equal(what)
      p6y.recycle()
      flag.expect(1)
      chai.expect(what.dispose).equal(eYo.doNothing)
      chai.expect(p6y.value).equal(eYo.NA)
    })
    it(`eYo.p6y.Dlgt_p.modelHandleStart`, function () {
    })
    it(`eYo.p6y.Dlgt_p.modelHandleGetSet`, function () {
      var onr = eYo.c9r.new({})
      eYo.p6y.new({
        copy: true,
        get (builtin) {
          return builtin()
        }
      }, 'foo', onr)
      chai.expect(() => eYo.p6y.new({
        copy: true,
        get () {
          return 421
        }
      }, 'foo', onr)).throw()
      var p6y = eYo.p6y.new({
        get: eYo.doNothing
      }, 'foo', onr)
      chai.expect(() => p6y.value).throw()
      chai.expect(() => p6y.value_).throw()
      chai.expect(() => p6y.value__).not.throw()
      var p6y = eYo.p6y.new({
        get: false
      }, 'foo', onr)
      chai.expect(() => p6y.value).throw()
      chai.expect(() => p6y.value_).throw()
      chai.expect(() => p6y.value__).not.throw()
      var p6y = eYo.p6y.new({
        get () {
          flag.push(1)
          return 421
        },
      }, 'foo', onr)
      chai.expect(p6y.value).equal(421)
      flag.expect(1)
      chai.expect(p6y.value_).equal(421)
      flag.expect(1)
      chai.expect(p6y.value__).equal(421)
      flag.expect(1)
      chai.expect(p6y.getValue()).equal(421)
      flag.expect(1)
      chai.expect(p6y.getStored()).equal(421)
      flag.expect(1)
      var onr = eYo.c9r.new({
        methods: {
          do_it (what) {
            flag.push(2, what)
            return what
          },
        },
      })
      var p6y = eYo.p6y.new({
        get (builtin) {
          flag.push(1)
          return this.do_it(builtin())
        },
      }, 'foo', onr)
      p6y.value_ = 3
      chai.expect(p6y.value).equal(3)
      flag.expect(123)
      chai.expect(p6y.value_).equal(3)
      flag.expect(123)
      chai.expect(p6y.value__).equal(3)
      flag.expect(0)
      chai.expect(p6y.getValue()).equal(3)
      flag.expect(123)
      chai.expect(p6y.getStored()).equal(3)
      flag.expect(0)
      chai.expect(() => eYo.p6y.new({
        get: 421
      }, 'foo', onr)).throw()
      var p6y = eYo.p6y.new({
        set: eYo.doNothing
      }, 'foo', onr)
      chai.expect(() => p6y.value = 421).throw()
      chai.expect(() => p6y.value_ = 421).throw()
      chai.expect(() => p6y.value__ = 421).not.throw()
      var p6y = eYo.p6y.new({
        set: false
      }, 'foo', onr)
      chai.expect(() => p6y.value = 421).throw()
      chai.expect(() => p6y.value_ = 421).throw()
      chai.expect(() => p6y.value__ = 421).not.throw()
    })
    it(`eYo.p6y.Dlgt_p.modelHandleStored`, function () {
      var p6y = eYo.p6y.new({
        get_: eYo.doNothing,
      }, 'p6y', onr)
      chai.expect(() => p6y.getStore()).throw()
      var p6y = eYo.p6y.new({
        get_: false,
      }, 'p6y', onr)
      chai.expect(() => p6y.getStore()).throw()
      var p6y = eYo.p6y.new({
        get_ (builtin) {
          let stored = builtin()
          flag.push(stored)
          return stored
        },
      }, 'p6y', onr)
      p6y.stored__ = 421
      chai.expect(p6y.getStored()).equal(421)
      flag.expect(421)
      var p6y = eYo.p6y.new({
        get_ () {
          flag.push(123)
          return 421
        },
      }, 'p6y', onr)
      chai.expect(p6y.getStored()).equal(421)
      flag.expect(123)
      chai.expect(() => eYo.p6y.new({
        get_: 421,
      }, 'p6y', onr)).throw()
      var p6y = eYo.p6y.new({
        set_: eYo.doNothing,
      }, 'p6y', onr)
      chai.expect(() => p6y.setStore()).throw()
      var p6y = eYo.p6y.new({
        set_: false,
      }, 'p6y', onr)
      chai.expect(() => p6y.setStore()).throw()
      var p6y = eYo.p6y.new({
        set_ (builtin, after) {
          builtin(after)
          flag.push(after + 1)
        },
      }, 'p6y', onr)
      p6y.setStored(1)
      flag.expect(2)
      chai.expect(p6y.getStored()).equal(1)
      var p6y = eYo.p6y.new({
        set_ (after) {
          flag.push(after + 1)
        },
      }, 'p6y', onr)
      p6y.setStored(1)
      flag.expect(2)
      chai.expect(() => eYo.p6y.new({
        set_: 421,
      }, 'p6y', onr)).throw()
    })
    it(`eYo.c9r.Dlgt_p.p6yAliasNew, Proxy alias`, function () {
      var p6y = eYo.p6y.new('p', onr)
      var alias = onr.eyo.p6yAliasNew('p', onr, p6y)
      // key
      chai.expect(alias.hasOwnProperty('key')).true
      chai.expect(alias.key).equal('p')
      chai.expect(() => alias.key = 0).throw()
      alias.key_ = 'foo'
      chai.expect(alias.key).equal('foo')
      chai.expect(p6y.key).equal('p')
      p6y.key_ = 'bar'
      chai.expect(alias.key).equal('foo')
      // owner
      chai.expect(alias.owner).equal(onr)
      chai.expect(() => alias.owner = 0).throw()
      alias.owner__ = 0
      chai.expect(alias.owner).equal(0)
      chai.expect(p6y.owner).equal(onr)
      p6y.owner__ = eYo.c9r.new('onr')
      chai.expect(alias.owner).equal(0)
      alias = onr.eyo.p6yAliasNew('p', onr, p6y)
      chai.expect(alias.hasOwnProperty('next')).false
      Object.defineProperties(alias, {
        next: {
          value: 1,
          configurable: true,
        }
      })
      chai.expect(alias.hasOwnProperty('next')).true
      chai.expect(alias.next).equal(1)
      chai.expect(p6y.next).not.equal(1)
      chai.expect(() => alias.next = 2).throw()
      Object.defineProperties(alias, {
        next: {
          value: 2,
          configurable: true,
        }
      })
      chai.expect(alias.next).equal(2)
      alias = onr.eyo.p6yAliasNew('p', onr, p6y)
      Object.defineProperties(p6y, {
        next: {
          value: 1,
          configurable: true,
        }
      })
      chai.expect(p6y.hasOwnProperty('next')).true
      chai.expect(p6y.next).equal(1)
      chai.expect(alias.hasOwnProperty('next')).false
      chai.expect(alias.next).not.equal(1)
    })
    it(`eYo.dlgt.BaseC9r_p.p6yMakeShortcut`, function () {
      let object = eYo.c9r.new({}) // Notice the explicit model !
      chai.expect(() => object.eyo.p6yMakeShortcut(421)).throws()
      chai.expect(() => object.eyo.p6yMakeShortcut(object, '', 421)).throws()
      let p6y = eYo.p6y.new('foo', object)
      p6y.value_ = 421
      chai.expect(p6y.value).equal(421)
      chai.expect(object.hasOwnProperty('bar_p')).false
      chai.expect(object.eyo.C9r_p.hasOwnProperty('bar')).false
      chai.expect(object.eyo.C9r_p.hasOwnProperty('bar_')).false
      chai.expect(object.eyo.C9r_p.hasOwnProperty('bar__')).false
      object.eyo.p6yMakeShortcut(object, 'bar', p6y)
      chai.expect(object.bar_p).equal(p6y)
      chai.expect(object.eyo.C9r_p.hasOwnProperty('foo')).false
      chai.expect(object.eyo.C9r_p.hasOwnProperty('foo_')).false
      chai.expect(object.eyo.C9r_p.hasOwnProperty('foo__')).false
      chai.expect(object.hasOwnProperty('foo_p')).false
      object.eyo.p6yMakeShortcut(object, p6y)
      chai.expect(object.foo_p).equal(p6y)
      chai.expect(object.bar).equal(object.bar_).equal(object.bar__).equal(p6y.value)
      chai.expect(object.eyo.C9r_p.hasOwnProperty('bar')).true
      chai.expect(object.eyo.C9r_p.hasOwnProperty('bar_')).true
      chai.expect(object.eyo.C9r_p.hasOwnProperty('bar__')).true
      chai.expect(object.foo).equal(object.foo_).equal(object.foo__).equal(p6y.value)
      chai.expect(object.eyo.C9r_p.hasOwnProperty('foo')).true
      chai.expect(object.eyo.C9r_p.hasOwnProperty('foo_')).true
      chai.expect(object.eyo.C9r_p.hasOwnProperty('foo__')).true
      p6y.do_it = function (...$) {
        flag.push(...$)
      }
      p6y.getValue = function (...$) {
        this.do_it(1, ...$)
      }
      p6y.setValue = function (...$) {
        this.do_it(2, ...$)
      }
      p6y.getStored = function (...$) {
        this.do_it(3, ...$)
      }
      p6y.setStored = function (...$) {
        this.do_it(4, ...$)
      }
      object.foo
      flag.expect(1)
      object.foo_
      flag.expect(3)
      object.foo__
      flag.expect(3)
      object.foo_ = 666
      flag.expect(2666)
      object.foo__ = 666
      flag.expect(4666)
      object.bar
      flag.expect(1)
      object.bar_
      flag.expect(3)
      object.bar__
      flag.expect(3)
      object.bar_ = 666
      flag.expect(2666)
      object.bar__ = 666
      flag.expect(4666)
    })
    it(`eYo.p6y.BaseC9r_p properties`, function () {
      let p6y = eYo.p6y.new('p6y', onr)
      chai.expect(p6y.value).equal(p6y.value_).equal(p6y.value__).equal(eYo.NA)
      chai.expect(() => p6y.value = 421).throw()
      p6y.value_ = 421
      chai.expect(p6y.value).equal(p6y.value_).equal(p6y.value__).equal(421)
      p6y.value__ = 666
      chai.expect(p6y.value).equal(p6y.value_).equal(p6y.value__).equal(666)
    })
  })

})
