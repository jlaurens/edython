// This file was generated by "prepare.py" on 2020-09-10 16:16:45.001200

describe(`Inline tests at core/decorate/decorate.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
//  /**
//   * @fileoverview Various decoration utilities.
//   * @author jerome.laurens@u-bourgogne.fr (Jérôme LAURENS)
//   */
//  'use strict'
//  
//  eYo.require('do')
//  
//  eYo.newNS('decorate')
  it(`Basic`, function () {
    chai.assert(eYo.decorate)
  })
//  
//  /**
//   * Decorate the function to be reentrant.
//   * The return function will test if `this.reentrant_[key]` exists.
//   * @param {string} key
//   * @param {function} f
//   * @param {Boolean} [raw]
//   * @return {Object | *} An object which `ans` property is the value returned by f when called. When `raw` is true, the value returned by f is returned.
//   */
//  eYo.decorate.reentrant_method = (object, key, f) => {
//    if (!eYo.isStr(object)) {
//      if (!object || !object.reentrant_ || object.reentrant_[key]) {
//        return
//      }
//    } else {
//      eYo.isNA(f) || eYo.throw('Unexpected f')
//      f = key
//      key = object
//    }
//    if (!eYo.isF(f)) {
//      return
//    }
//    return function(..._) {
//      if (this.reentrant_[key]) {
//        return eYo.INVALID
//      }
//      this.reentrant_[key] = true
//      var ans
//      try {
//        ans = f.call(this, ..._)
//        return ans
//      } finally {
//        this.reentrant_[key] = false
//      }
//    }
//  }
//  
//  /**
//   * Decorate the function to be reentrant.
//   * Beware, the use of `alt_f` is constrained,
//   * some values may be catched unexpectedly.
//   * @param {string} key
//   * @param {function} f
//   * @param {function} [alt_f] - defaults to `eYo.doNothing`.
//   * @return {*} Whathever `f` returns.
//   */
//  eYo.decorate.reentrant = (key, f, alt_f = eYo.doNothing) => {
  it(`eYo.decorate.reentrant`, function () {
//    return function(...$) {
//      try {
//        this[key] = alt_f
//        return f.call(this, ...$)
//      } finally {
//        delete this[key]
//      }
//    }
    chai.assert(eYo.decorate.reentrant)
    let _p = Object.getPrototypeOf(eYo.test.onr)
    _p.bar = eYo.decorate.reentrant('bar', function (what) {
      this.flag('d', what)
      return this.bar()
    })
    chai.expect(eYo.test.onr.bar(1)).undefined
    eYo.flag.expect('/d1')
    _p.bar = eYo.decorate.reentrant('bar', function (what) {
      this.flag('d', what)
      return this.bar(what)
    }, function (what) {
      this.flag('D', what + 2)
      return what + 1
    })
    chai.expect(eYo.test.onr.bar(3)).equal(4)
    eYo.flag.expect('/d3/D5')
    _p.bar = eYo.decorate.reentrant('bar', function (what) {
      let ans = this.bar(what)
      this.flag('d', what + 2)
      return ans
    }, function (what) {
      this.flag('D', what)
      return 3 * what
    })
    chai.expect(eYo.test.onr.bar(3)).equal(9)
    eYo.flag.expect('/D3/d5')
  })
//  }
//  
//  /**
//   * Calls `f` and logs the time used when greater than 50ms.
//   * @param {String} key
//   * @param {Function} f
//   * @param {Number} limit
//   * @return {*} Whatever `f` returns.
//   */
//  eYo.decorate.benchmark = function (key, f, limit = 50) {
//    return function (...$) {
//      let startTime = performance.now()
//      try {
//        return f.call(this, ...$)
//      } finally {
//        let duration = performance.now() - startTime
//        if (duration > limit) {
//          console.log(`BENCHMARK: ${key} took ${duration}ms`)
//        }
//      }
//    }
//  }
//  
//  /**
//   * Ensure an array function.
//   * @param {Object} [object]
//   * @return object when a function else a function with signature f() -> []
//   */
//  eYo.decorate.ArrayFunction = object => {
//    var did = eYo.isF(object)
//      ? object
//      : eYo.isRA(object)
//        ? () => object
//        : object
//          ? () => [object]
//          : () => object
//    return did
//  }

})
