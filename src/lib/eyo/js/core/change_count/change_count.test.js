// This file was generated by "update.py" on 2020-09-26 09:37:50.496764

//  /**
//   * @fileoverview Board override.
//   * @author jerome.laurens@u-bourgogne.fr (Jérôme LAURENS)
//   */
//  'use strict'
//  
//  eYo.o4t.newNS('changeCount')
//  
describe(`Inline tests at core/change_count/change_count.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
  it(`Basic`, function () {
    chai.assert(eYo.o4t.changeCount)
    chai.assert(eYo.o4t.changeCount.merge)
  })
//  
//  eYo.o4t.changeCount.modelDeclare({
describe(`Inline tests at core/change_count/change_count.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
  describe(`eYo.o4t.changeCount.modelDeclare`, function () {
    var ns = eYo.o4t.newNS()
    ns.makeBaseC3s()
    eYo.o4t.changeCount.merge(ns.BaseC3s_p)
//    properties: {
//      changeCount: 0,
describe(`Inline tests at core/change_count/change_count.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`changeCount`, function () {
      var o = new ns.BaseC3s('foo', onr)
      chai.expect(o).property('changeCount_p')
    })
//    },
//    methods: {
//      /**
//       * If the event is not a UI event,
//       * adds 1 to change count on redo,
//       * removes 2 on undo.
//       * Order of params does not matter.
//       * @param {Boolean} [redo] - defaults to `true`
//       * @param {Event} [event]
//       */
//      updateChangeCount (redo, event) {
describe(`Inline tests at core/change_count/change_count.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`updateChangeCount`, function () {
      var o = new ns.BaseC3s('foo', onr)
      chai.assert(o.updateChangeCount)
//        if (redo === true) {
//          var what = 1
      var o = new ns.BaseC3s('foo', onr)
      o.updateChangeCount(true)
      chai.expect(o.changeCount).equal(1)
      o.updateChangeCount(true)
      chai.expect(o.changeCount).equal(2)
//        } else if (redo === false) {
//          what = -1
      o.updateChangeCount(false)
      chai.expect(o.changeCount).equal(1)
      o.updateChangeCount(false)
      chai.expect(o.changeCount).equal(0)
//        } else {
//          [redo, event] = [event, redo]
//          what = !eYo.isDef(redo) || redo ? 1 : -1
      o.updateChangeCount()
      chai.expect(o.changeCount).equal(1)
//        }
//        if (!event || !event.isUI) {
//          this.changeCount_ += what
      var event = {}
      var o = new ns.BaseC3s('foo', onr)
      o.updateChangeCount(event)
      chai.expect(o.changeCount).equal(1)
      o.updateChangeCount(true, event)
      chai.expect(o.changeCount).equal(2)
      o.updateChangeCount(false, event)
      chai.expect(o.changeCount).equal(1)
      o.resetChangeCount()
      chai.expect(o.changeCount).equal(0)
      o.updateChangeCount(event)
      chai.expect(o.changeCount).equal(1)
      o.updateChangeCount(event, true)
      chai.expect(o.changeCount).equal(2)
      o.updateChangeCount(event, false)
      chai.expect(o.changeCount).equal(1)
      o.resetChangeCount()
      chai.expect(o.changeCount).equal(0)
      event.isUI = true
      o.updateChangeCount(event)
      chai.expect(o.changeCount).equal(0)
      o.updateChangeCount(event, true)
      chai.expect(o.changeCount).equal(0)
      o.updateChangeCount(event, false)
      chai.expect(o.changeCount).equal(0)
      o.resetChangeCount()
      chai.expect(o.changeCount).equal(0)
//        }
    })
//      },
//      /**
//       * Resets the change count to 0.
//       */
//      resetChangeCount () {
describe(`Inline tests at core/change_count/change_count.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`resetChangeCount`, function () {
      var o = new ns.BaseC3s('foo', onr)
      chai.assert(o.resetChangeCount)
      o.updateChangeCount()
      chai.expect(o.changeCount).equal(1)
      o.resetChangeCount()
      chai.expect(o.changeCount).equal(0)
//        this.changeCount_ = 0
    })
//      }
//    },
  })
//  })

})
