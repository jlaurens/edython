// This file was generated by "update.py" on 2020-09-26 09:37:50.485326

//  /**
//   * @fileoverview Utility to make a constructor with some edython specific data storage and methods.
//   * @author jerome.laurens@u-bourgogne.fr (Jérôme LAURENS)
//   */
//  'use strict'
//  
//  eYo.require('xre')
//  
//  import kv from '../kv/kv.js'
//  
//  eYo.require('do')
//  eYo.require('dlgt')
//  eYo.require('decorate')
//  
//  eYo.require('t3')
//  
//  /**
//   * Management of constructors and models.
//   * Models are trees with some inheritancy.
//   * @name {eYo.c3s}
//   * @namespace
//   */
//  eYo.newNS('c3s')
//  
//  eYo.mixinRO(eYo, {
//    $C3s: Symbol('C3s'),
//    $newSubC3s: Symbol('newSubC3s'),
//    $new: Symbol('$new'),
//  })
//  
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
  describe(`C3s`, function () {
//  
//  // ANCHOR: Utilities
//  
//  /**
//   * Convenient way to append code to an already existing method.
//   * This allows to define a method in different places.
//   * @param {Object} object - Object
//   * @param {String} key - Looking for or creating |Object[key]|
//   * @param {Function} f - the function we will append
//   */
//  eYo.c3s._p.appendToMethod = (object, key, f) => {
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`eYo.c3s.appendToMethod`, function () {
//    let old = object[key]
//    if (old && old !== eYo.doNothing) {
//      eYo.isF(old) || eYo.throw(`Expecting a function ${old}`)
//      object[key] = function () {
//        old.apply(this, arguments)
//        f.apply(this, arguments)
//      }
//    } else {
//      object[key] = f
//    }
      var o = {}
      eYo.c3s.appendToMethod(o, 'foo1', function (x) {
        eYo.flag.push(x)
      })
      o.foo1(1)
      eYo.flag.expect(1)
      o = {
        foo1: eYo.doNothing,
      }
      eYo.c3s.appendToMethod(o, 'foo1', function (x) {
        eYo.flag.push(x)
      })
      o.foo1(1)
      eYo.flag.expect(1)
      o = {
        foo1: 421,
      }
      chai.expect(() => {
        eYo.c3s.appendToMethod(o, 'foo1', function (x) {})
      }).xthrow()
      o = {
        foo1 (x) {
          eYo.flag.push(x)
        },
      }
      eYo.c3s.appendToMethod(o, 'foo1', function (x) {
        eYo.flag.push(x+1)
      })
      o.foo1(1)
      eYo.flag.expect(12)
    })
//  }
//  
//  // ANCHOR Top level constructor utilities
//  
//  eYo.mixinFR(eYo.c3s._p, {
//    /**
//     * @name{eYo.c3s._p.newC3sKV}
//     * Make a constructor with an `eYo.$` property.
//     * Caveat, constructors must have the same arguments.
//     * Use a key->value design if you do not want that.
//     * The `model` object has template: `{prepare: function, init: function, dispose: function}`.
//     * Each namespace has its own `newC3s` method which creates classes in itself.
//     * This is not used directly, only decorated.
//     *
//     * If a namespace is given and key is `foo`,
//     * `foo_p` is the protocol,
//     * `foo_S` is the super class,
//     * `foo_s` is the protocol of the super class,
//     * All the given parameters have their normal meaning.
//     * @param {eYo.KV} $ - NS:  The namespace, id:  The id, SuperC3s:  The super class, model:  The dictionary of parameters.
//     * @return {Function} the created constructor.
//     */
//    newC3sKV ($) {
//      !$.NS || $.NS === eYo.NULL_NS || eYo.isaNS($.NS) || eYo.throw(`${this.name}/newC3sKV: Bad ns: ${$.NS}`)
//      !$.id || eYo.isId($.id) || eYo.throw(`${this.name}/newC3sKV: Bad id: ${$.id.toString()}`)
//  
//      !$.SuperC3s || eYo.isC3s($.SuperC3s) || eYo.throw(`${this.name}/newC3sKV: Bad SuperC3s: ${$.SuperC3s}`)
//      if (!eYo.isD($.model)) {
//        console.error($.model)
//      }
//      eYo.isD($.model) || eYo.throw(`${this.name}/newC3sKV: Bad model: ${$.model}`)
//  
//      // process
//      let SuperDlgt = $.SuperC3s && $.SuperC3s[eYo.$] && $.SuperC3s[eYo.$].constructor || $.NS.Dlgt
//      let eyo$ = eYo.dlgt.new($.NS, $.id, SuperDlgt, $.model)
//      let C3s = eyo$.newC3s($.SuperC3s)
//      eYo.mixinFR(C3s, {
//        [eYo.$newSubC3s]: eyo$.makeSubC3s.bind(eyo$),
//      })
//      return C3s
//    },
//  })
//  
//  eYo.mixinFR(eYo.c3s._p, {
//    /**
//     * Turns the arguments into a `eYo.KV` instance.
//     * When there is a unique argument which is already an instance of
//     * `eYo.KV`, the argument is returned as is.
//     *
//     * @param {Object} [NS] - Namespace
//     * @param {String | Symbol} [id] - Identifier
//     * @param {eYo.C3s} [SuperC3s] - Super constructor
//     * @param {*} register - Whther to register in the appropriate database
//     * @param {*} [model] - Model
//     */
//    newKV4C3s (NS, id, SuperC3s, register, model) {
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`eYo.c3s.newKV4C3s`, function () {
      var NS = eYo.c3s.newNS()
//      if (!eYo.isaNS(NS)) {
//        if(model) {
//          eYo.test && eYo.test.IN_THROW || console.error('BREAK HERE!!!')
//        }
//        model && eYo.throw(`eYo.c3s.newKV4C3s: Unexpected model(1/${model})`)
      chai.expect(() => eYo.c3s.newKV4C3s(1, 2, 3, 4)).xthrow()
//        ;[NS, id, SuperC3s, register, model] = [this, NS, id, SuperC3s, register]
      ;[eYo.NA, NS].forEach(ns => {
        ;[eYo.NA, 'Foo'].forEach(id => {
          ;[eYo.NA, NS.BaseC3s].forEach(SuperC3s => {
            ;[eYo.NA, {}].forEach(model => {
              var $ = []
              ns && $.push(ns)
              id && $.push(id)
              SuperC3s  && $.push(SuperC3s)
              model && $.push(model)
              $ = eYo.c3s.newKV4C3s(...$)
              ns && chai.expect($.NS).equal(ns)
              $.id === 'BaseC3s' || id && chai.expect($.id).equal(id) || chai.expect($.id).eyo_Sym
              chai.expect($.SuperC3s).equal(SuperC3s ??= eYo.C3s)
              chai.expect($.model).eql(model || {})
            })
          })
        })
      })
//      }
//      if (!eYo.isId(id)) {
//        model && eYo.throw(`eYo.c3s.newKV4C3s: Unexpected model(2/${model})`)
//        ;[id, SuperC3s, register, model] = [eYo.NA, id, SuperC3s, register]
//      }
//      // Default value for SuperC3s, when there are arguments
//      if (SuperC3s && !eYo.isC3s(SuperC3s)) {
//        model && eYo.throw(`eYo.c3s.newKV4C3s: Unexpected model(3/${model})`)
//        ;[SuperC3s, register, model] = [eYo.NA, SuperC3s, register]
//      }
//      if (!eYo.isBool(register)) {
//        model && eYo.throw(`eYo.c3s.newKV4C3s: Unexpected model (4/${model})`)
//        ;[register, model] = [false, register]
//      }
//      model = eYo.called(model) || {}
//      if (id) {
//        SuperC3s || (SuperC3s = model[eYo.$SuperC3s] || this.BaseC3s)
//      } else if (SuperC3s || (SuperC3s = model[eYo.$SuperC3s])) {
//        id = SuperC3s[eYo.$] && SuperC3s[eYo.$].id
//        // possible id conflict here if NS is SuperC3s's namespace
//      } else {
//        id = Symbol(`${this.name}.?`)
      var NS = eYo.c3s.newNS()
      chai.expect(NS.BaseC3s).equal(eYo.c3s.BaseC3s)
      chai.expect(NS.BaseC3s_p).equal(eYo.C3s_p)
      NS.makeBaseC3s()
      chai.expect(NS.BaseC3s).not.equal(eYo.c3s.BaseC3s)
      chai.expect(NS.BaseC3s_p).not.equal(eYo.C3s_p)
      chai.expect(NS.newC3s({
        [eYo.$SuperC3s]: eYo.NA,
      })[eYo.$SuperC3s]).undefined
//        if (!eYo.objectHasOwnProperty(model, eYo.$SuperC3s)) {
//          SuperC3s = this.BaseC3s
      let C3s = NS.newC3s()
//        ////... console.error(C3s[eYo.$SuperC3s][eYo.$name])
//        ////... console.error(NS.BaseC3s[eYo.$name])
      chai.expect(C3s[eYo.$SuperC3s]).equal(NS.BaseC3s)
//        }
//      }
//      if (eYo.isSubclass(this.BaseC3s, SuperC3s)) {
//        SuperC3s = this.BaseC3s
//      }
//      return kv.new({NS, id, SuperC3s, register, model})
    })
//    },
//    /**
//     * @name{eYo.c3s.newC3s}
//     * Make a constructor with an `[eYo.$]` property.
//     * Caveat, constructors must have the same arguments.
//     * Use a key->value design if you do not want that.
//     * The `params` object has template: `{init: function, dispose: function}`.
//     * Each namespace has its own `newC3s` method which creates classes in itself.
//     * @param {Object} [ns] -  The namespace, defaults to the SuperC3s's one or the caller.
//     * @param {String} id -  The id.
//     * @param {Function} [SuperC3s] -  The eventual super class. There is no default value. Must be a subclass of `eYo.c3s.BaseC3s`, but not necessarily with an `eyo`.
//     * @param {Boolean} [register] -  Whether to register the created constructor.
//     * @param {Object|Function} [model] -  The dictionary of parameters. Or a function to create such a dictionary. This might be overcomplicated.
//     * @return {Function} the created constructor.
//     */
//    newC3s (ns, id, SuperC3s, register, model) {
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`newC3s`, function () {
//      let $ = this.newKV4C3s(ns, id, SuperC3s, register, model)
//      let C3s = this.newC3sKV($)
//      register && this.register($.model.register, C3s)
//      return C3s
      let NS = eYo.c3s.newNS()
      chai.expect(NS.newC3s)
      let C3s = NS.newC3s()
      C3s[eYo.$].finalizeC3s()
      chai.expect(C3s).eyo_C3s
      let o = new C3s()
      chai.expect(o).instanceOf(C3s)
    })
//    },
//  })
//  
//  // ANCHOR Constructor utilities
//  {
//    eYo.mixinRO(eYo.c3s, {
//      /**
//       * All the created constructors, by name. Private storage.
//       * @package
//       */
//      byName__: new Map(),
//      /**
//       * All the created constructors, by id. Private storage.
//       * @package
//       */
//      byId__: new Map(),
//      /**
//       * All the created constructors, by type. Private storage.
//       * @package
//       */
//      byType__: new Map(),
//    })
//  
//    eYo.mixinFR(eYo.c3s, {
//      /**
//       * All the created delegates. Public accessor by key.
//       * @param{String} id - the key used to create the constructor.
//       */
//      forId (id) {
//        return eYo.c3s.byId__.get(id)
//      },
//      /**
//       * All the created delegates. Public accessor by name.
//       * @param{String} name - the name used to create the constructor.
//       */
//      forName (name) {
//        return eYo.c3s.byName__.get(name)
//      },
//      /**
//       * All the created delegates. Public accessor by type.
//       * @param{String} type - the type used to create the constructor.
//       */
//      forType (type) {
//        return eYo.c3s.byType__.get(type)
//      },
//    })
//  
//    /**
//     * @type{Array<String>}
//     * @property{types}
//     */
//    eYo.mixinRO(eYo.c3s._p, {
//      types () {
//        return eYo.c3s.byType__.keys()
//      },
//    })
//  
//    eYo.mixinFR(eYo.c3s._p, {
//      /**
//       * Delegate registrator.
//       * The constructor has an eyo attached object for
//       * some kind of introspection.
//       * Computes and caches the model
//       * only once from the creation of the delegate.
//       *
//       * The last delegate registered for a given prototype name wins.
//       * @param {!String} [id] - the optional id
//       * @param {Object} C3s
//       * @private
//       */
//      register (id, C3s) {
//        if (id && !eYo.isStr(id)) {
//          C3s && eYo.throw(`UNEXPECTED ${C3s}`)
//          ;[id, C3s] = [id[eYo.$].id, id]
//        }
//        var type
//        if ((type = eYo.t3.expr[id])) {
//          eYo.t3.expr.available.push(type)
//        } else if ((type = eYo.t3.stmt[id])) {
//          eYo.t3.stmt.available.push(type)
//        }
//        var eyo = C3s[eYo.$]
//        id = eyo.id
//        id && eYo.c3s.byId__.set(id, C3s)
//        var name = eyo.name
//        name && eYo.c3s.byName__.set(name, C3s)
//        if (type) {
//          eYo.c3s.byType__.set(type, C3s)
//          // cache all the input, output and statement data at the prototype level
//        }
//      },
//    })
//  }
//  
//  // ANCHOR eYo.dlgt._p.makeSubC3s
//  eYo.mixinFR(eYo.Dlgt_p, {
//    /**
//     * Turns the arguments into a `eYo.KV` instance..
//     *
//     * @param {Object} [NS] - Namespace where the new subclass will be stored
//     * @param {String | Symbol} [id] - Identifier
//     * @param {Boolean} [register] - Whether to register the newly created class.
//     * @param {*} [model] - Model
//     */
//    newKV4SubC3s (NS, id, register, model) {
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`eYo.dlgt.newKV4SubC3s`, function () {
      var NS = eYo.c3s.newNS()
//      if (!eYo.isaNS(NS)) {
//        if(model) {
//          eYo.test && eYo.test.IN_THROW || console.error('BREAK HERE!!!')
//        }
//        model && eYo.throw(`eYo.Dlgt.newKV4SubC3s: Unexpected model(1/${model})`)
      chai.expect(() => eYo.dlgt.newKV4SubC3s(1, 2, 3, 4)).xthrow()
//        ;[NS, id, register, model] = [this.ns, NS, id, register]
      ;[eYo.NA, NS].forEach(ns => {
        ;[eYo.NA, 'Foo'].forEach(id => {
          ;[eYo.NA, {}].forEach(model => {
            var $ = []
            ns && $.push(ns)
            id && $.push(id)
            model && $.push(model)
            $ = eYo.c3s.newKV4C3s(...$)
            ns && chai.expect($.NS).equal(ns)
//        ////...       console.error($.id)
//        ////...       console.error(id)
            $.id === 'BaseC3s' || id && chai.expect($.id).equal(id) || chai.expect($.id).eyo_Sym
            chai.expect($.SuperC3s).equal((ns || eYo.c3s).BaseC3s)
            chai.expect($.model).eql(model || {})
          })
        })
      })
//      }
//      if (!eYo.isId(id)) {
//        model && eYo.throw(`eYo.Dlgt.newKV4SubC3s: Unexpected model(2/${model})`)
//        ;[id, register, model] = [eYo.NA, id, register]
//      }
//      if (!eYo.isBool(register)) {
//        model && eYo.throw(`eYo.Dlgt.newKV4SubC3s: Unexpected model (3/${model})`)
//        ;[register, model] = [false, register]
//      }
//      model = eYo.called(model) || {}
//      var SuperC3s = model[eYo.$SuperC3s]
//      if (id) {
//        SuperC3s ??= this.C3s
//      } else if ((SuperC3s = model[eYo.$SuperC3s])) {
//        id = SuperC3s[eYo.$] && SuperC3s[eYo.$].id
//        // possible id conflict here if NS is SuperC3s's namespace
//      } else {
//        id = Symbol(`${this.name}.?`)
      var NS = eYo.c3s.newNS()
      chai.expect(NS.BaseC3s).equal(eYo.c3s.BaseC3s)
      chai.expect(NS.BaseC3s_p).equal(eYo.C3s_p)
      NS.makeBaseC3s()
      chai.expect(NS.BaseC3s).not.equal(eYo.c3s.BaseC3s)
      chai.expect(NS.BaseC3s_p).not.equal(eYo.C3s_p)
      chai.expect(NS.newC3s({
        [eYo.$SuperC3s]: eYo.NA,
      })[eYo.$SuperC3s]).undefined
//        if (!eYo.objectHasOwnProperty(model, eYo.$SuperC3s)) {
//          SuperC3s = this.C3s
      chai.expect(NS.newC3s()[eYo.$SuperC3s]).equal(NS.BaseC3s)
//        }
//      }
//      if (eYo.isSubclass(this.C3s, SuperC3s)) {
//        SuperC3s = this.C3s
//      }
//      return kv.new({NS, id, SuperC3s, register, model})
    })
//    },
//    /**
//     * Convenient shortcut to create subclasses.
//     * Forwards to the namespace which must exist!
//     * @param {Object} [ns] -  The namespace, possibly `eYo.NA`.
//     * @param {String|Symbol|eYo.KV} id -  to create `ns[id]`.
//     * When an instance of `eYo.KV` it must be the unique argument.
//     * @param {Object} [model] -  Model object
//     * @return {?Function} the constructor created or `eYo.NA` when the receiver has no namespace.
//     * @this {eYo.Dlgt}
//     */
//    makeSubC3s (ns, id, model) {
//      let $ = this.newKV4SubC3s(ns, id, model)
//      return this.ns.newC3sKV($)
//    },
//  })
//  
//  // ANCHOR BaseC3s
//  {
//    eYo.mixinFR(eYo.c3s._p, {
//      /**
//       * Convenient method to create the BaseC3s class.
//       * @param {Boolean} [unfinalize] - whether not to finalize the constructor or not.
//       * @param {Function} [SuperC3s] - the ancestor class
//       * @param {Object} [model] - the model
//       */
//      makeBaseC3s (unfinalize, SuperC3s, model) {
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`eYo.c3s.makeBaseC3s`, function () {
      chai.assert(eYo.c3s.makeBaseC3s)
//        eYo.objectHasOwnProperty(this, 'BaseC3s') && eYo.throw(`${this.name}: Already BaseC3s`)
      var NS = eYo.c3s.newNS()
      NS.makeBaseC3s()
      chai.expect(() => NS.makeBaseC3s()).xthrow()
//        if (!eYo.isBool(unfinalize)) {
//          eYo.isNA(model) || eYo.throw(`${this.name}/makeBaseC3s Unexpected last argument: ${model}`)
      chai.expect(() => NS.makeBaseC3s(eYo.doNothing, {}, 1)).xthrow()
//          ;[unfinalize, SuperC3s, model] = [false, unfinalize, SuperC3s]
//        }
//        if (eYo.isC3s(SuperC3s)) {
//          model = eYo.called(model) || {}
      var model = { foo: 421 }
      var C3s = eYo.c3s.newNS().makeBaseC3s(() => model)
      chai.expect(C3s[eYo.$].model.foo).equal(421)
      NS = eYo.c3s.newNS()
      model = {
        foo: 421,
        prepare ($) {
          eYo.flag.push('p', $)
          chai.expect(this.model).eql(model)
        }
      }
      NS.makeBaseC3s(model)
      chai.expect(NS.BaseC3s[eYo.$].model).eql(model)
      new NS.BaseC3s(eYo.test.kv)
      eYo.flag.expect('p$kv')
//        } else {
//          eYo.isNA(model) || eYo.throw(`${this.name}/makeBaseC3s: Unexpected argument (${model})`)
      chai.expect(() => NS.makeBaseC3s({}, 1)).xthrow()
//          model = eYo.called(SuperC3s) || {}
//          SuperC3s = model && model[eYo.$$[eYo.$SuperC3s]] || this.$super && this.$super.BaseC3s || eYo.NA
//        }
//        let C3s = this.newC3s(this, 'BaseC3s', SuperC3s, model)
      var ns = eYo.c3s.newNS()
      var C3s = ns.makeBaseC3s()
      chai.expect(C3s).eyo_BaseC3s
//        if (!this.anonymous) {
//          let parentNS = this.parentNS
//          if (parentNS && (eYo.objectHasOwnProperty(this._p, 'key') || eYo.objectHasOwnProperty(this, 'key'))) {
//            // Convenient shortcut
//            var K = eYo.do.toTitleCase(this.key)
//            eYo.mixinRO(parentNS, {
//              [K] () {
//                return C3s
//              },
//              [K+'_p'] () {
//                return C3s.prototype
//              },
//              [K+'$'] () {
//                return C3s[eYo.$]
//              },
//            })
//            eYo.mixinRO(C3s[eYo.$], {
//              name () {
//                return `${parentNS.name}.${K}`
//              },
//            })
      var seed = eYo.genUID(eYo.ALNUM)
      var key = 'x' + seed
      var Key = 'X' + seed
      var ns = eYo.c3s.newNS(eYo, key)
      chai.expect(ns).equal(eYo[key])
      chai.expect(ns.key).equal(key)
      chai.expect(ns.parentNS).equal(eYo)
      ns.makeBaseC3s()
      chai.expect(ns.BaseC3s).equal(eYo[Key])
//          }
//        }
//        eYo.mixinRO(this, {
//          Dlgt_p () {
//            return C3s[eYo.$]._p
      var ns = eYo.c3s.newNS()
      ns.makeBaseC3s()
      chai.expect(ns.Dlgt_p).equal(ns.BaseC3s[eYo.$_p])
//          },
//          Dlgt () {
//            return C3s[eYo.$]._p.constructor
      var ns = eYo.c3s.newNS()
      ns.makeBaseC3s()
      chai.expect(ns.Dlgt).equal(ns.BaseC3s[eYo.$].constructor)
//          },
//        })
//        !unfinalize && C3s[eYo.$].finalizeC3s()
//        return C3s
    })
//      },
//    })
//  
//    eYo.mixinFR(eYo.c3s, {
//      /**
//       * The default implementation does nothing yet.
//       * @param {eYo.C3s} $this - the instance to initialize
//       * @param {eYo.KV} $
//       */
//      c3sPrepare ($this, $) {}, // eslint-disable-line no-unused-vars
//      /**
//       * The default implementation does nothing yet.
//       * @param {eYo.C3s} $this - the instance to initialize
//       * @param {eYo.KV} $
//       */
//      c3sInit ($this, $) {}, // eslint-disable-line no-unused-vars
//      /**
//       * The default implementation does nothing  yet.
//       * @param {eYo.C3s} $this - the instance to initialize
//       * @param {eYo.KV} $
//       */
//      c3sDispose ($this, $) {}, // eslint-disable-line no-unused-vars
//    })
//  
//    /**
//     * Basic object constructor.
//     * Each constructor has an eyo property, a delegate, which points to a singleton instance. If a class inherits from an ancestor, then the delegate class also inherits from the class of the ancestor's delegate.
//     * The default class.
//     * @name {eYo.C3s}
//     * @constructor
//     */
//  
//    eYo.c3s.makeBaseC3s(true, {
//      /**
//       * @param {String} key - an identifier for the owner.
//       * @param {eYo.c3s.BaseC3s} owner - the immediate owner of this object.
//       */
//      /**
//       * Prepare the receiver. Subclassers will override this.
//        * @param {eYo.KV} kv
//      */
//      prepare (kv) {
//        eYo.c3s.c3sPrepare(this, kv)
//      },
//      /**
//       * Initialize the receiver. Subclassers will override this.
//       * @param {eYo.KV} kv
//       */
//      init (kv) {
//        eYo.c3s.c3sInit(this, kv)
//      },
//      /**
//       * Dispose of the receiver. Subclassers will override this.
//       * @param {eYo.KV} kv
//       */
//      dispose (kv) {
//        eYo.c3s.c3sDispose(this, kv)
//      },
//    })
//  
//    eYo.mixinFR(eYo._p, {
//      /**
//       * Whether the argument is a property instance.
//       * @param {*} what
//       */
//      isaC3s (what) {
//        return !!what && what instanceof eYo.C3s
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`isaC3s (what)`, function () {
      chai.expect(eYo.isaC3s(true)).false
      chai.expect(eYo.isaC3s(new eYo.c3s.BaseC3s())).true
    })
//      }
//    })
//  
//    eYo.mixinRO(eYo.C3s_p, {
//      /**
//       * Convenience shortcut to the model
//       */
//      model () {
//        return this.eyo$.model
//      },
//      /**
//       * Convenience shortcut to the name space
//       */
//      ns () {
//        return this.eyo$.ns
//      },
//    })
//  }
//  
//  // ANCHOR model
//  
//  eYo.mixinFR(eYo.model, {
//    /**
//     * The created model, by key.
//     * @param{String} key - the key used to create the constructor.
//     */
//    forId (id) {
//      var C3s = eYo.c3s.byId__[id]
//      return C3s && C3s[eYo.$].model
//    },
//    /**
//     * The created model, by name.
//     * @param{String} name - the key used to create the constructor.
//     */
//    forName (name) {
//      var C3s = eYo.c3s.byName(name)
//      return C3s && C3s[eYo.$].model
//    },
//    /**
//     * The created models given its type.
//     * @param{String} type - the key used to create the constructor.
//     */
//    forType (type) {
//      var C3s = eYo.c3s.byType__[type]
//      return C3s && C3s[eYo.$].model
//    },
//  })
//  
//  /**
//   * For subclassers.
//   * Create methods in the managed prototype according to the given model.
//   * @param {String} [key] -
//   * @param {Object} model - model object
//   */
//  eYo.c3s.Dlgt_p.modelHandle = {
//    modelHandle (key, model) {// eslint-disable-line no-unused-vars
//    }
//  }.modelHandle
//  
//  // ANCHOR Initers, Disposers
//  
//  eYo.make$$('starters')
//  
//  eYo.mixinFR(eYo.c3s._p, {
//    /**
//     * The model BaseC3s used to derive a new class. Used by `modelMakeC3s`.
//     * @see The `new` method.
//     * @param {Object} model
//     * @param {String} id
//     */
//    modelBaseC3s (model, id) { // eslint-disable-line
//      return this.BaseC3s
//    },
//    /**
//     * Create a new constructor based on the model.
//     * No need to subclass.
//     * Instead, override `modelBaseC3s` and `modelHandle`.
//     * @param {Object} model
//     * @param {*} ...$ - other arguments
//     */
//    modelMakeC3s (model, id) {
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`modelMakeC3s`, function () {
//      let C3s = this.newC3s(Symbol(''), this.modelBaseC3s(model, id), model)
//      C3s[eYo.$].finalizeC3s()
//      model = C3s[eYo.$].model
//      model[eYo.$C3s] = C3s
      var model = {}
      var C3s = eYo.c3s.modelMakeC3s(model)
      chai.expect(model[eYo.$C3s]).equal(C3s)
      chai.expect(C3s[eYo.$].model).equal(model)
      model[eYo.$SuperC3s] = eYo.c3s.newNS().makeBaseC3s()
      var C3s = eYo.c3s.modelMakeC3s(model)
      chai.expect(eYo.isSubclass(C3s, model[eYo.$SuperC3s]))
//      model[eYo.$$.starters] = []
//      let eyo$ = C3s[eYo.$]
//      eyo$.modelHandle()
//      Object.defineProperty(eyo$, 'name',
//        eYo.descriptorR((()=> {
//          return id
//            ? {$ () {
//              return `${eyo$.ns.name}.${eYo.do.toTitleCase(id.description || id)}`
//            }}.$ : {$ () {
//              return `${eyo$.$super.name}(${model.register || '...'})`
//            }}.$
//        })())
//      )
//      model.register && this.register(model.register, C3s)
//      return C3s
    })
//    },
//    /**
//     * Create a new BaseC3s instance based on the model
//     * @param {eYo.KV} kv - Arguments are passed to the constructor.
//     * @param {Object} [model] - Optional model.
//     */
//    prepare (kv, model) {
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`prepare`, function () {
      let NS = eYo.c3s.newNS()
      var model = {
        prepare ($) {
          eYo.flag.push('p', $)
        }
      }
      NS.makeBaseC3s(model)
      var SuperC3s = eYo.c3s.newC3s(eYo.genUID(eYo.IDENT), model)
      SuperC3s[eYo.$].finalizeC3s()
//      if (!model) {
//        var C3s = this.BaseC3s
//        return new C3s(kv)
      var o = NS.prepare(eYo.test.kv, {
        prepare ($) {
          eYo.flag.push('pp', $)
        }
      })
      chai.expect(o).instanceOf(NS.BaseC3s)
      eYo.flag.expect('p$kvpp$kv')
//      }
//      C3s = model[eYo.$C3s]
//      if (!C3s) {
//        C3s = this.modelMakeC3s(model, kv.id)
      var o = NS.prepare(eYo.test.kv, {})
      chai.expect(o).instanceOf(eYo.c3s.BaseC3s)
      eYo.flag.expect('p$kv')
//      }
      var o = eYo.c3s.prepare(eYo.test.kv, {
        [eYo.$C3s]: NS.BaseC3s
      })
      chai.expect(o).instanceOf(NS.BaseC3s)
      eYo.flag.expect('p$kv')
//      var ans = new C3s(kv)
//      ans.preInit = {
//        preInit () {
//          delete this.preInit
//          model[eYo.$$.starters].forEach(f => f(this))
//        }
//      }.preInit
//      return ans
      var o = eYo.c3s.prepare(eYo.test.kv, {
        dispose ($) {
          eYo.flag.push('x', $)
        }
      })
      o.dispose(eYo.test.kv)
      eYo.flag.expect('x$kv')
      var o = eYo.c3s.prepare(eYo.test.kv, {
        methods: {
          flag (...$) {
            eYo.flag.push('/', ...$)
          },
        },
      })
      o.flag(1, 2)
      eYo.flag.expect('/12')
    })
//    },
//    /**
//     * Create a kv parameter set based on the arguments.
//     * @param {Object} [model] - Optional namespace, defaults to the receiver.
//     * @param {Object} id - the id, to be used in `NS[id]`
//     */
//    kv4new (model, id) {
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`kv4new`, function () {
//      if (!eYo.isD(model)) {
//        eYo.isNA(id) || eYo.throw(`${this.name}/kv4new: Unexpected id (${id})`)
      let NS = eYo.c3s.newNS()
      let model = {NS}
      chai.expect(() => {
        eYo.c3s.kv4new('foo', {})
      }).xthrow()
//        ;[model, id] = [eYo.NA, model]
      var ident = eYo.genUID(eYo.IDENT)
      var ans = NS.kv4new(ident)
      chai.expect(kv.isa(ans))
      chai.expect(ans.id).equal(ident)
      chai.expect(ans.model).undefined
      var ident = eYo.genUID(eYo.IDENT)
      var ans = NS.kv4new(model, ident)
      chai.expect(kv.isa(ans))
      chai.expect(ans.id).equal(ident)
      chai.expect(ans.model).equal(model)
//      }
//      eYo.isId(id) || eYo.throw(`${this.name}/Singleton: Unexpected id parameter ${eYo.isSym(id) ? id.toString(): id}`)
      chai.expect(() => {
        eYo.c3s.kv4new(1)
      }).xthrow()
//      return kv.new({model, id})
    })
//    },
//    /**
//     * Create a new BaseC3s instance based on the model
//     */
//    new (kv, ...$) {
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`new`, function () {
//      if (!kv.isa(kv)) {
//        kv = this.kv4new(kv, ...$)
//      }
//      let ans = this.prepare(kv)
//      ans.preInit && ans.preInit()
//      ans.init(kv)
//      return ans
      let foo = eYo.c3s.new('foo')
      chai.expect(foo).instanceOf(eYo.C3s)
    })
//    },
//    /**
//     * Create a new instance based on the model.
//     * @param {Object} model
//     */
//    singleton (model) {
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`singleton`, function () {
//      let C3s = this.newC3s('', model)
//      C3s[eYo.$].finalizeC3s()
//      return new C3s()
      var foo = eYo.c3s.singleton()
      chai.expect(foo).instanceof(eYo.C3s)
      var foo = eYo.c3s.singleton({
        CONSTs: {
          FOO: 421,
        },
        methods: {
          flag(...$) {
            eYo.flag.push('/', ...$)
          }
        }
      })
      foo.flag(1, 2)
      eYo.flag.expect('/12')
      chai.expect(foo.FOO).equal(421)
    })
//    },
//    /**
//     * Create a new kv parameter based on the arguments.
//     * @param {Object} [NS] - Optional namespace, defaults to the receiver.
//     * @param {Object} id - the id, to be used in `NS[id]`
//     * @param {Object} model
//     */
//    kv4newSingleton (NS, id, model) {
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`kv4newSingleton`, function () {
//      if (!eYo.isaNS(NS)) {
//        eYo.isNA(model) || eYo.throw(`${this.name}/kv4newSingleton: Unexpected model (${model})`)
      chai.expect(() => {
        eYo.c3s.kv4newSingleton('foo', {}, 1)
      }).xthrow()
//        ;[NS, id, model] = [this, NS, id]
      var ident = eYo.genUID(eYo.IDENT)
      let NS = eYo.c3s.newNS()
      let model = {}
      var ans = NS.kv4newSingleton(ident, model)
      chai.expect(kv.isa(ans)).true
      chai.expect(ans.id).equal(ident)
      chai.expect(ans.model).equal(model)
//      }
//      eYo.isId(id) || eYo.throw(`${this.name}/kv4newSingleton: Unexpected parameter ${eYo.isSym(id) ? id.toString(): id}`)
      chai.expect(() => {
        eYo.c3s.kv4newSingleton(1, {})
      }).xthrow()
//      return kv.new({NS, id, model})
    })
//    },
//    /**
//     * Create a new instance based on the model.
//     * @param {Object} [NS] - Optional namespace, defaults to the receiver.
//     * @param {Object} id - the result will be `NS[id]`
//     * @param {Object} model
//     */
//    newSingleton (kv$, ...$) {
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`newSingleton`, function () {
      let NS = eYo.c3s.newNS()
//      if (!kv.isa(kv$)) {
//        kv$ = this.kv4newSingleton(kv$, ...$)
//      }
//      let C3s = this.newC3s(Symbol(eYo.do.toTitleCase(kv$.id)), kv$.model)
//      C3s[eYo.$].finalizeC3s()
//      let ans = new C3s()
//      Object.defineProperty(kv$.NS, kv$.id, eYo.descriptorR({$ () {
//        return ans
//      }}.$))
//      return ans
      var ans = eYo.c3s.newSingleton(NS, 'id', {})
      chai.expect(ans).instanceof(eYo.C3s)
      chai.expect(ans).equal(NS.id)
      var foo = eYo.c3s.newSingleton(NS, 'id1', {
        CONSTs: {
          FOO: 421,
        },
        methods: {
          flag(...$) {
            eYo.flag.push('/', ...$)
          }
        }
      })
      NS.id1.flag(1, 2)
      eYo.flag.expect('/12')
      chai.expect(NS.id1.FOO).equal(421)
      var SuperC3s = eYo.c3s.newC3s('')
      SuperC3s[eYo.$].finalizeC3s()
      ans = NS.newSingleton('id2', {
        [eYo.$SuperC3s]: SuperC3s
      })
      chai.expect(ans).instanceof(SuperC3s)
      ans = NS.newSingleton('id3', {
        [eYo.$SuperC3s]: eYo.NA
      })
      chai.expect(ans.eyo$.SuperC3s).undefined
    })
//    },
//  })
//  
//  // ANCHOR: Model
//  
//  // Prepares the constructors.
//  
//  Object.assign(eYo.C3s_p, {
//    /**
//     * Initialize the receiver, it should not be overriden but it is still exposed for debugging purposes mainly.
//     * Called by `newFoo` creator.
//     * @param  {eYo.KV} kv
//     */
//    init (kv) {
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`eYo.C3s_p.init`, function () {
//      try {
//        this.init = eYo.doNothing
//        this.eyo$.c3sInit(this, kv)
//      } finally {
//        delete this.init
//      }
      chai.expect(eYo.C3s_p.init).eyo_F
    })
//    },
//    /**
//     * Dispose of the receiver, it should not be overriden but it is still exposed for debugging purposes mainly.
//     * Must be called.
//     * @param  {eYo.KV} kv
//     */
//    dispose (kv) {
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`eYo.C3s_p.dispose`, function () {
//      try {
//        this.dispose = eYo.doNothing
//        this.eyo$.c3sDispose(this, kv)
//      } finally {
//        delete this.dispose
//      }
      chai.expect(eYo.C3s_p.dispose).eyo_F
    })
//    },
//  })
//  
//  eYo.C3s$.finalizeC3s(
describe(`Inline tests at core/c3s/c3s.js`, function () {
  this.timeout(20000)
  beforeEach (function () { eYo.test.setup() })
  eYo.test.onrModel = eYo.NA
  eYo.test.setup()
    it(`eYo.C3s$.finalizeC3s`, function () {
      chai.expect(eYo.C3s[eYo.$].hasFinalizedC3s).true
//    eYo.model.manyDescriptorF('dlgt', 'prepare', 'init'),
      ;['init', eYo.$,].forEach(K => {
        eYo.c3s.new({
          [K]: eYo.doNothing
        }, Symbol())
        eYo.c3s.new({
          [K]: eYo.NA
        }, Symbol())
        chai.expect(() => {
          eYo.c3s.new({
            [K]: 421
          }, Symbol())
        }).xthrow()
      })
//    eYo.model.manyDescriptorForFalse('dispose'),
//    {
//      methods: {
//        [eYo.model.VALIDATE]: eYo.model.validateD,
      eYo.c3s.new({
        methods: eYo.NA
      })
      chai.expect(() => {
        eYo.c3s.new({
          methods: 421,
        })
      }).xthrow()
//        [eYo.model.ANY]: eYo.model.descriptorF(),
      eYo.c3s.new({
        methods: {
          foo: eYo.NA,
          chi () {},
        }
      })
      chai.expect(() => {
        eYo.c3s.new({
          methods: {
            mi: 421,
          },
        })
      }).xthrow()
//      },
//      CONSTs: {
//        [eYo.model.VALIDATE]: eYo.model.validateD,
      eYo.c3s.new({
        CONSTs: eYo.NA
      })
      chai.expect(() => {
        eYo.c3s.new({
          CONSTs: 421,
        })
      }).xthrow()
//        [eYo.model.ANY]: {
//          [eYo.model.VALIDATE]: function (before, key) {
//            if (key) {
//              if (!XRegExp.exec(key, eYo.xre.CONST)) {
//                return eYo.INVALID
//              }
//            }
      eYo.c3s.new({
        CONSTs: {
          CONST_421: 421,
        }
      })
      chai.expect(() => {
        eYo.c3s.new({
          CONSTs: {
            cCONST_421: 421,
          },
        })
      }).xthrow()
//          }
//        },
//      },
//    }
    })
//  )
//  
  })

})
