/* Generated by ./graminit.py */

eYo.require('py.tkn')

eYo.py.makeNS('gmr_init')

eYo.forwardDeclare('py.bitset')

Object.defineProperties(eYo.py.tkn, {
/* Generated by Parser/pgen */
  single_input: { value: 256 },
  file_input: { value: 257 },
  eval_input: { value: 258 },
  decorator: { value: 259 },
  decorators: { value: 260 },
  decorated: { value: 261 },
  async_funcdef: { value: 262 },
  funcdef: { value: 263 },
  parameters: { value: 264 },
  typedargslist: { value: 265 },
  tfpdef: { value: 266 },
  varargslist: { value: 267 },
  vfpdef: { value: 268 },
  stmt: { value: 269 },
  simple_stmt: { value: 270 },
  small_stmt: { value: 271 },
  expr_stmt: { value: 272 },
  annassign: { value: 273 },
  testlist_star_expr: { value: 274 },
  augassign: { value: 275 },
  del_stmt: { value: 276 },
  pass_stmt: { value: 277 },
  flow_stmt: { value: 278 },
  break_stmt: { value: 279 },
  continue_stmt: { value: 280 },
  return_stmt: { value: 281 },
  yield_stmt: { value: 282 },
  raise_stmt: { value: 283 },
  import_stmt: { value: 284 },
  import_name: { value: 285 },
  import_from: { value: 286 },
  import_as_name: { value: 287 },
  dotted_as_name: { value: 288 },
  import_as_names: { value: 289 },
  dotted_as_names: { value: 290 },
  dotted_name: { value: 291 },
  global_stmt: { value: 292 },
  nonlocal_stmt: { value: 293 },
  assert_stmt: { value: 294 },
  compound_stmt: { value: 295 },
  async_stmt: { value: 296 },
  if_stmt: { value: 297 },
  while_stmt: { value: 298 },
  for_stmt: { value: 299 },
  try_stmt: { value: 300 },
  with_stmt: { value: 301 },
  with_item: { value: 302 },
  except_clause: { value: 303 },
  suite: { value: 304 },
  namedexpr_test: { value: 305 },
  test: { value: 306 },
  test_nocond: { value: 307 },
  lambdef: { value: 308 },
  lambdef_nocond: { value: 309 },
  or_test: { value: 310 },
  and_test: { value: 311 },
  not_test: { value: 312 },
  comparison: { value: 313 },
  comp_op: { value: 314 },
  star_expr: { value: 315 },
  expr: { value: 316 },
  xor_expr: { value: 317 },
  and_expr: { value: 318 },
  shift_expr: { value: 319 },
  arith_expr: { value: 320 },
  term: { value: 321 },
  factor: { value: 322 },
  power: { value: 323 },
  atom_expr: { value: 324 },
  atom: { value: 325 },
  testlist_comp: { value: 326 },
  trailer: { value: 327 },
  subscriptlist: { value: 328 },
  subscript: { value: 329 },
  sliceop: { value: 330 },
  exprlist: { value: 331 },
  testlist: { value: 332 },
  dictorsetmaker: { value: 333 },
  classdef: { value: 334 },
  arglist: { value: 335 },
  argument: { value: 336 },
  comp_iter: { value: 337 },
  sync_comp_for: { value: 338 },
  comp_for: { value: 339 },
  comp_if: { value: 340 },
  encoding_decl: { value: 341 },
  yield_expr: { value: 342 },
  yield_arg: { value: 343 },
  func_body_suite: { value: 344 },
  func_type_input: { value: 345 },
  func_type: { value: 346 },
  typelist: { value: 347 },
})
Object.defineProperties(eYo.py.tkn, {
  _NT_NAMES: {
    value: [
     'single_input',
     'file_input',
     'eval_input',
     'decorator',
     'decorators',
     'decorated',
     'async_funcdef',
     'funcdef',
     'parameters',
     'typedargslist',
     'tfpdef',
     'varargslist',
     'vfpdef',
     'stmt',
     'simple_stmt',
     'small_stmt',
     'expr_stmt',
     'annassign',
     'testlist_star_expr',
     'augassign',
     'del_stmt',
     'pass_stmt',
     'flow_stmt',
     'break_stmt',
     'continue_stmt',
     'return_stmt',
     'yield_stmt',
     'raise_stmt',
     'import_stmt',
     'import_name',
     'import_from',
     'import_as_name',
     'dotted_as_name',
     'import_as_names',
     'dotted_as_names',
     'dotted_name',
     'global_stmt',
     'nonlocal_stmt',
     'assert_stmt',
     'compound_stmt',
     'async_stmt',
     'if_stmt',
     'while_stmt',
     'for_stmt',
     'try_stmt',
     'with_stmt',
     'with_item',
     'except_clause',
     'suite',
     'namedexpr_test',
     'test',
     'test_nocond',
     'lambdef',
     'lambdef_nocond',
     'or_test',
     'and_test',
     'not_test',
     'comparison',
     'comp_op',
     'star_expr',
     'expr',
     'xor_expr',
     'and_expr',
     'shift_expr',
     'arith_expr',
     'term',
     'factor',
     'power',
     'atom_expr',
     'atom',
     'testlist_comp',
     'trailer',
     'subscriptlist',
     'subscript',
     'sliceop',
     'exprlist',
     'testlist',
     'dictorsetmaker',
     'classdef',
     'arglist',
     'argument',
     'comp_iter',
     'sync_comp_for',
     'comp_for',
     'comp_if',
     'encoding_decl',
     'yield_expr',
     'yield_arg',
     'func_body_suite',
     'func_type_input',
     'func_type',
     'typelist',
   ]
  }
})
;(() => {
  var a = (lbl, arrow) => new eYo.py.gmr.Arc(lbl, arrow)
  var s = (arcs) => new eYo.py.gmr.State(arcs)
  var d = (type, name, initial, n_states, states, first) => new eYo.py.gmr.DFA(type, name, initial, states, first)
  var b = (...args) => {
    var ss = eYo.py.bitset.new(args.length * 8)
    for (var i = 0 ; i < args.length ; i++) {
      ss.ra[i] = args[i]
    }
    return ss
  }
  var l = (type, str) => new eYo.py.gmr.Label(type, str || null)
  /* Generated by Parser/pgen */
  //#include "pgenheaders.h"
  //#include "grammar.h"
  //grammar _pyParser_Grammar;
  var /* static arc */ arcs_0_0/*[3]*/ = [ // single_input
    a(2, 1), // NEWLINE
    a(3, 1), // simple_stmt
    a(4, 2), // compound_stmt
  ]
  var /* static arc */ arcs_0_1/*[1]*/ = [ // single_input
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_0_2/*[1]*/ = [ // single_input
    a(2, 1), // NEWLINE
  ]
  var /* static state */ states_0/*[3]*/ = [ // single_input
    s(arcs_0_0),
    s(arcs_0_1),
    s(arcs_0_2),
  ]
  states_0.d_name = "single_input"
  var /* static arc */ arcs_1_0/*[3]*/ = [ // file_input
    a(2, 0), // NEWLINE
    a(6, 0), // stmt
    a(7, 1), // ENDMARKER
  ]
  var /* static arc */ arcs_1_1/*[1]*/ = [ // file_input
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_1/*[2]*/ = [ // file_input
    s(arcs_1_0),
    s(arcs_1_1),
  ]
  states_1.d_name = "file_input"
  var /* static arc */ arcs_2_0/*[1]*/ = [ // eval_input
    a(9, 1), // testlist
  ]
  var /* static arc */ arcs_2_1/*[2]*/ = [ // eval_input
    a(2, 1), // NEWLINE
    a(7, 2), // ENDMARKER
  ]
  var /* static arc */ arcs_2_2/*[1]*/ = [ // eval_input
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_2/*[3]*/ = [ // eval_input
    s(arcs_2_0),
    s(arcs_2_1),
    s(arcs_2_2),
  ]
  states_2.d_name = "eval_input"
  var /* static arc */ arcs_3_0/*[1]*/ = [ // decorator
    a(11, 1), // AT
  ]
  var /* static arc */ arcs_3_1/*[1]*/ = [ // decorator
    a(12, 2), // dotted_name
  ]
  var /* static arc */ arcs_3_2/*[2]*/ = [ // decorator
    a(13, 3), // LPAR
    a(2, 4), // NEWLINE
  ]
  var /* static arc */ arcs_3_3/*[2]*/ = [ // decorator
    a(14, 5), // arglist
    a(15, 6), // RPAR
  ]
  var /* static arc */ arcs_3_4/*[1]*/ = [ // decorator
    a(0, 4), // EMPTY
  ]
  var /* static arc */ arcs_3_5/*[1]*/ = [ // decorator
    a(15, 6), // RPAR
  ]
  var /* static arc */ arcs_3_6/*[1]*/ = [ // decorator
    a(2, 4), // NEWLINE
  ]
  var /* static state */ states_3/*[7]*/ = [ // decorator
    s(arcs_3_0),
    s(arcs_3_1),
    s(arcs_3_2),
    s(arcs_3_3),
    s(arcs_3_4),
    s(arcs_3_5),
    s(arcs_3_6),
  ]
  states_3.d_name = "decorator"
  var /* static arc */ arcs_4_0/*[1]*/ = [ // decorators
    a(10, 1), // decorator
  ]
  var /* static arc */ arcs_4_1/*[2]*/ = [ // decorators
    a(10, 1), // decorator
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_4/*[2]*/ = [ // decorators
    s(arcs_4_0),
    s(arcs_4_1),
  ]
  states_4.d_name = "decorators"
  var /* static arc */ arcs_5_0/*[1]*/ = [ // decorated
    a(16, 1), // decorators
  ]
  var /* static arc */ arcs_5_1/*[3]*/ = [ // decorated
    a(18, 2), // classdef
    a(19, 2), // funcdef
    a(20, 2), // async_funcdef
  ]
  var /* static arc */ arcs_5_2/*[1]*/ = [ // decorated
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_5/*[3]*/ = [ // decorated
    s(arcs_5_0),
    s(arcs_5_1),
    s(arcs_5_2),
  ]
  states_5.d_name = "decorated"
  var /* static arc */ arcs_6_0/*[1]*/ = [ // async_funcdef
    a(21, 1), // async
  ]
  var /* static arc */ arcs_6_1/*[1]*/ = [ // async_funcdef
    a(19, 2), // funcdef
  ]
  var /* static arc */ arcs_6_2/*[1]*/ = [ // async_funcdef
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_6/*[3]*/ = [ // async_funcdef
    s(arcs_6_0),
    s(arcs_6_1),
    s(arcs_6_2),
  ]
  states_6.d_name = "async_funcdef"
  var /* static arc */ arcs_7_0/*[1]*/ = [ // funcdef
    a(22, 1), // def
  ]
  var /* static arc */ arcs_7_1/*[1]*/ = [ // funcdef
    a(23, 2), // NAME
  ]
  var /* static arc */ arcs_7_2/*[1]*/ = [ // funcdef
    a(24, 3), // parameters
  ]
  var /* static arc */ arcs_7_3/*[2]*/ = [ // funcdef
    a(25, 4), // RARROW
    a(27, 5), // COLON
  ]
  var /* static arc */ arcs_7_4/*[1]*/ = [ // funcdef
    a(26, 6), // test
  ]
  var /* static arc */ arcs_7_5/*[2]*/ = [ // funcdef
    a(28, 7), // TYPE_COMMENT
    a(29, 8), // func_body_suite
  ]
  var /* static arc */ arcs_7_6/*[1]*/ = [ // funcdef
    a(27, 5), // COLON
  ]
  var /* static arc */ arcs_7_7/*[1]*/ = [ // funcdef
    a(29, 8), // func_body_suite
  ]
  var /* static arc */ arcs_7_8/*[1]*/ = [ // funcdef
    a(0, 8), // EMPTY
  ]
  var /* static state */ states_7/*[9]*/ = [ // funcdef
    s(arcs_7_0),
    s(arcs_7_1),
    s(arcs_7_2),
    s(arcs_7_3),
    s(arcs_7_4),
    s(arcs_7_5),
    s(arcs_7_6),
    s(arcs_7_7),
    s(arcs_7_8),
  ]
  states_7.d_name = "funcdef"
  var /* static arc */ arcs_8_0/*[1]*/ = [ // parameters
    a(13, 1), // LPAR
  ]
  var /* static arc */ arcs_8_1/*[2]*/ = [ // parameters
    a(30, 2), // typedargslist
    a(15, 3), // RPAR
  ]
  var /* static arc */ arcs_8_2/*[1]*/ = [ // parameters
    a(15, 3), // RPAR
  ]
  var /* static arc */ arcs_8_3/*[1]*/ = [ // parameters
    a(0, 3), // EMPTY
  ]
  var /* static state */ states_8/*[4]*/ = [ // parameters
    s(arcs_8_0),
    s(arcs_8_1),
    s(arcs_8_2),
    s(arcs_8_3),
  ]
  states_8.d_name = "parameters"
  var /* static arc */ arcs_9_0/*[3]*/ = [ // typedargslist
    a(31, 1), // tfpdef
    a(34, 2), // STAR
    a(35, 3), // DOUBLESTAR
  ]
  var /* static arc */ arcs_9_1/*[4]*/ = [ // typedargslist
    a(32, 4), // EQUAL
    a(33, 5), // COMMA
    a(28, 6), // TYPE_COMMENT
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_9_2/*[4]*/ = [ // typedargslist
    a(31, 7), // tfpdef
    a(33, 8), // COMMA
    a(28, 6), // TYPE_COMMENT
    a(0, 2), // EMPTY
  ]
  var /* static arc */ arcs_9_3/*[1]*/ = [ // typedargslist
    a(31, 9), // tfpdef
  ]
  var /* static arc */ arcs_9_4/*[1]*/ = [ // typedargslist
    a(26, 10), // test
  ]
  var /* static arc */ arcs_9_5/*[5]*/ = [ // typedargslist
    a(28, 11), // TYPE_COMMENT
    a(31, 12), // tfpdef
    a(34, 13), // STAR
    a(35, 3), // DOUBLESTAR
    a(0, 5), // EMPTY
  ]
  var /* static arc */ arcs_9_6/*[1]*/ = [ // typedargslist
    a(0, 6), // EMPTY
  ]
  var /* static arc */ arcs_9_7/*[3]*/ = [ // typedargslist
    a(33, 8), // COMMA
    a(28, 6), // TYPE_COMMENT
    a(0, 7), // EMPTY
  ]
  var /* static arc */ arcs_9_8/*[4]*/ = [ // typedargslist
    a(28, 14), // TYPE_COMMENT
    a(31, 15), // tfpdef
    a(35, 3), // DOUBLESTAR
    a(0, 8), // EMPTY
  ]
  var /* static arc */ arcs_9_9/*[3]*/ = [ // typedargslist
    a(33, 16), // COMMA
    a(28, 6), // TYPE_COMMENT
    a(0, 9), // EMPTY
  ]
  var /* static arc */ arcs_9_10/*[3]*/ = [ // typedargslist
    a(33, 5), // COMMA
    a(28, 6), // TYPE_COMMENT
    a(0, 10), // EMPTY
  ]
  var /* static arc */ arcs_9_11/*[4]*/ = [ // typedargslist
    a(31, 12), // tfpdef
    a(34, 13), // STAR
    a(35, 3), // DOUBLESTAR
    a(0, 11), // EMPTY
  ]
  var /* static arc */ arcs_9_12/*[4]*/ = [ // typedargslist
    a(33, 5), // COMMA
    a(32, 4), // EQUAL
    a(28, 6), // TYPE_COMMENT
    a(0, 12), // EMPTY
  ]
  var /* static arc */ arcs_9_13/*[4]*/ = [ // typedargslist
    a(31, 17), // tfpdef
    a(33, 18), // COMMA
    a(28, 6), // TYPE_COMMENT
    a(0, 13), // EMPTY
  ]
  var /* static arc */ arcs_9_14/*[3]*/ = [ // typedargslist
    a(31, 15), // tfpdef
    a(35, 3), // DOUBLESTAR
    a(0, 14), // EMPTY
  ]
  var /* static arc */ arcs_9_15/*[4]*/ = [ // typedargslist
    a(33, 8), // COMMA
    a(32, 19), // EQUAL
    a(28, 6), // TYPE_COMMENT
    a(0, 15), // EMPTY
  ]
  var /* static arc */ arcs_9_16/*[2]*/ = [ // typedargslist
    a(28, 6), // TYPE_COMMENT
    a(0, 16), // EMPTY
  ]
  var /* static arc */ arcs_9_17/*[3]*/ = [ // typedargslist
    a(33, 18), // COMMA
    a(28, 6), // TYPE_COMMENT
    a(0, 17), // EMPTY
  ]
  var /* static arc */ arcs_9_18/*[4]*/ = [ // typedargslist
    a(28, 20), // TYPE_COMMENT
    a(31, 21), // tfpdef
    a(35, 3), // DOUBLESTAR
    a(0, 18), // EMPTY
  ]
  var /* static arc */ arcs_9_19/*[1]*/ = [ // typedargslist
    a(26, 7), // test
  ]
  var /* static arc */ arcs_9_20/*[3]*/ = [ // typedargslist
    a(31, 21), // tfpdef
    a(35, 3), // DOUBLESTAR
    a(0, 20), // EMPTY
  ]
  var /* static arc */ arcs_9_21/*[4]*/ = [ // typedargslist
    a(33, 18), // COMMA
    a(32, 22), // EQUAL
    a(28, 6), // TYPE_COMMENT
    a(0, 21), // EMPTY
  ]
  var /* static arc */ arcs_9_22/*[1]*/ = [ // typedargslist
    a(26, 17), // test
  ]
  var /* static state */ states_9/*[23]*/ = [ // typedargslist
    s(arcs_9_0),
    s(arcs_9_1),
    s(arcs_9_2),
    s(arcs_9_3),
    s(arcs_9_4),
    s(arcs_9_5),
    s(arcs_9_6),
    s(arcs_9_7),
    s(arcs_9_8),
    s(arcs_9_9),
    s(arcs_9_10),
    s(arcs_9_11),
    s(arcs_9_12),
    s(arcs_9_13),
    s(arcs_9_14),
    s(arcs_9_15),
    s(arcs_9_16),
    s(arcs_9_17),
    s(arcs_9_18),
    s(arcs_9_19),
    s(arcs_9_20),
    s(arcs_9_21),
    s(arcs_9_22),
  ]
  states_9.d_name = "typedargslist"
  var /* static arc */ arcs_10_0/*[1]*/ = [ // tfpdef
    a(23, 1), // NAME
  ]
  var /* static arc */ arcs_10_1/*[2]*/ = [ // tfpdef
    a(27, 2), // COLON
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_10_2/*[1]*/ = [ // tfpdef
    a(26, 3), // test
  ]
  var /* static arc */ arcs_10_3/*[1]*/ = [ // tfpdef
    a(0, 3), // EMPTY
  ]
  var /* static state */ states_10/*[4]*/ = [ // tfpdef
    s(arcs_10_0),
    s(arcs_10_1),
    s(arcs_10_2),
    s(arcs_10_3),
  ]
  states_10.d_name = "tfpdef"
  var /* static arc */ arcs_11_0/*[3]*/ = [ // varargslist
    a(37, 1), // vfpdef
    a(34, 2), // STAR
    a(35, 3), // DOUBLESTAR
  ]
  var /* static arc */ arcs_11_1/*[3]*/ = [ // varargslist
    a(32, 4), // EQUAL
    a(33, 5), // COMMA
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_11_2/*[3]*/ = [ // varargslist
    a(37, 6), // vfpdef
    a(33, 7), // COMMA
    a(0, 2), // EMPTY
  ]
  var /* static arc */ arcs_11_3/*[1]*/ = [ // varargslist
    a(37, 8), // vfpdef
  ]
  var /* static arc */ arcs_11_4/*[1]*/ = [ // varargslist
    a(26, 9), // test
  ]
  var /* static arc */ arcs_11_5/*[4]*/ = [ // varargslist
    a(37, 10), // vfpdef
    a(34, 11), // STAR
    a(35, 3), // DOUBLESTAR
    a(0, 5), // EMPTY
  ]
  var /* static arc */ arcs_11_6/*[2]*/ = [ // varargslist
    a(33, 7), // COMMA
    a(0, 6), // EMPTY
  ]
  var /* static arc */ arcs_11_7/*[3]*/ = [ // varargslist
    a(37, 12), // vfpdef
    a(35, 3), // DOUBLESTAR
    a(0, 7), // EMPTY
  ]
  var /* static arc */ arcs_11_8/*[2]*/ = [ // varargslist
    a(33, 13), // COMMA
    a(0, 8), // EMPTY
  ]
  var /* static arc */ arcs_11_9/*[2]*/ = [ // varargslist
    a(33, 5), // COMMA
    a(0, 9), // EMPTY
  ]
  var /* static arc */ arcs_11_10/*[3]*/ = [ // varargslist
    a(33, 5), // COMMA
    a(32, 4), // EQUAL
    a(0, 10), // EMPTY
  ]
  var /* static arc */ arcs_11_11/*[3]*/ = [ // varargslist
    a(37, 14), // vfpdef
    a(33, 15), // COMMA
    a(0, 11), // EMPTY
  ]
  var /* static arc */ arcs_11_12/*[3]*/ = [ // varargslist
    a(33, 7), // COMMA
    a(32, 16), // EQUAL
    a(0, 12), // EMPTY
  ]
  var /* static arc */ arcs_11_13/*[1]*/ = [ // varargslist
    a(0, 13), // EMPTY
  ]
  var /* static arc */ arcs_11_14/*[2]*/ = [ // varargslist
    a(33, 15), // COMMA
    a(0, 14), // EMPTY
  ]
  var /* static arc */ arcs_11_15/*[3]*/ = [ // varargslist
    a(37, 17), // vfpdef
    a(35, 3), // DOUBLESTAR
    a(0, 15), // EMPTY
  ]
  var /* static arc */ arcs_11_16/*[1]*/ = [ // varargslist
    a(26, 6), // test
  ]
  var /* static arc */ arcs_11_17/*[3]*/ = [ // varargslist
    a(33, 15), // COMMA
    a(32, 18), // EQUAL
    a(0, 17), // EMPTY
  ]
  var /* static arc */ arcs_11_18/*[1]*/ = [ // varargslist
    a(26, 14), // test
  ]
  var /* static state */ states_11/*[19]*/ = [ // varargslist
    s(arcs_11_0),
    s(arcs_11_1),
    s(arcs_11_2),
    s(arcs_11_3),
    s(arcs_11_4),
    s(arcs_11_5),
    s(arcs_11_6),
    s(arcs_11_7),
    s(arcs_11_8),
    s(arcs_11_9),
    s(arcs_11_10),
    s(arcs_11_11),
    s(arcs_11_12),
    s(arcs_11_13),
    s(arcs_11_14),
    s(arcs_11_15),
    s(arcs_11_16),
    s(arcs_11_17),
    s(arcs_11_18),
  ]
  states_11.d_name = "varargslist"
  var /* static arc */ arcs_12_0/*[1]*/ = [ // vfpdef
    a(23, 1), // NAME
  ]
  var /* static arc */ arcs_12_1/*[1]*/ = [ // vfpdef
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_12/*[2]*/ = [ // vfpdef
    s(arcs_12_0),
    s(arcs_12_1),
  ]
  states_12.d_name = "vfpdef"
  var /* static arc */ arcs_13_0/*[2]*/ = [ // stmt
    a(3, 1), // simple_stmt
    a(4, 1), // compound_stmt
  ]
  var /* static arc */ arcs_13_1/*[1]*/ = [ // stmt
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_13/*[2]*/ = [ // stmt
    s(arcs_13_0),
    s(arcs_13_1),
  ]
  states_13.d_name = "stmt"
  var /* static arc */ arcs_14_0/*[1]*/ = [ // simple_stmt
    a(38, 1), // small_stmt
  ]
  var /* static arc */ arcs_14_1/*[2]*/ = [ // simple_stmt
    a(39, 2), // SEMI
    a(2, 3), // NEWLINE
  ]
  var /* static arc */ arcs_14_2/*[2]*/ = [ // simple_stmt
    a(38, 1), // small_stmt
    a(2, 3), // NEWLINE
  ]
  var /* static arc */ arcs_14_3/*[1]*/ = [ // simple_stmt
    a(0, 3), // EMPTY
  ]
  var /* static state */ states_14/*[4]*/ = [ // simple_stmt
    s(arcs_14_0),
    s(arcs_14_1),
    s(arcs_14_2),
    s(arcs_14_3),
  ]
  states_14.d_name = "simple_stmt"
  var /* static arc */ arcs_15_0/*[8]*/ = [ // small_stmt
    a(40, 1), // expr_stmt
    a(41, 1), // del_stmt
    a(42, 1), // pass_stmt
    a(43, 1), // flow_stmt
    a(44, 1), // import_stmt
    a(45, 1), // global_stmt
    a(46, 1), // nonlocal_stmt
    a(47, 1), // assert_stmt
  ]
  var /* static arc */ arcs_15_1/*[1]*/ = [ // small_stmt
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_15/*[2]*/ = [ // small_stmt
    s(arcs_15_0),
    s(arcs_15_1),
  ]
  states_15.d_name = "small_stmt"
  var /* static arc */ arcs_16_0/*[1]*/ = [ // expr_stmt
    a(48, 1), // testlist_star_expr
  ]
  var /* static arc */ arcs_16_1/*[4]*/ = [ // expr_stmt
    a(49, 2), // annassign
    a(50, 3), // augassign
    a(32, 4), // EQUAL
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_16_2/*[1]*/ = [ // expr_stmt
    a(0, 2), // EMPTY
  ]
  var /* static arc */ arcs_16_3/*[2]*/ = [ // expr_stmt
    a(51, 2), // yield_expr
    a(9, 2), // testlist
  ]
  var /* static arc */ arcs_16_4/*[2]*/ = [ // expr_stmt
    a(51, 5), // yield_expr
    a(48, 5), // testlist_star_expr
  ]
  var /* static arc */ arcs_16_5/*[3]*/ = [ // expr_stmt
    a(32, 4), // EQUAL
    a(28, 2), // TYPE_COMMENT
    a(0, 5), // EMPTY
  ]
  var /* static state */ states_16/*[6]*/ = [ // expr_stmt
    s(arcs_16_0),
    s(arcs_16_1),
    s(arcs_16_2),
    s(arcs_16_3),
    s(arcs_16_4),
    s(arcs_16_5),
  ]
  states_16.d_name = "expr_stmt"
  var /* static arc */ arcs_17_0/*[1]*/ = [ // annassign
    a(27, 1), // COLON
  ]
  var /* static arc */ arcs_17_1/*[1]*/ = [ // annassign
    a(26, 2), // test
  ]
  var /* static arc */ arcs_17_2/*[2]*/ = [ // annassign
    a(32, 3), // EQUAL
    a(0, 2), // EMPTY
  ]
  var /* static arc */ arcs_17_3/*[2]*/ = [ // annassign
    a(51, 4), // yield_expr
    a(9, 4), // testlist
  ]
  var /* static arc */ arcs_17_4/*[1]*/ = [ // annassign
    a(0, 4), // EMPTY
  ]
  var /* static state */ states_17/*[5]*/ = [ // annassign
    s(arcs_17_0),
    s(arcs_17_1),
    s(arcs_17_2),
    s(arcs_17_3),
    s(arcs_17_4),
  ]
  states_17.d_name = "annassign"
  var /* static arc */ arcs_18_0/*[2]*/ = [ // testlist_star_expr
    a(26, 1), // test
    a(52, 1), // star_expr
  ]
  var /* static arc */ arcs_18_1/*[2]*/ = [ // testlist_star_expr
    a(33, 2), // COMMA
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_18_2/*[3]*/ = [ // testlist_star_expr
    a(26, 1), // test
    a(52, 1), // star_expr
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_18/*[3]*/ = [ // testlist_star_expr
    s(arcs_18_0),
    s(arcs_18_1),
    s(arcs_18_2),
  ]
  states_18.d_name = "testlist_star_expr"
  var /* static arc */ arcs_19_0/*[13]*/ = [ // augassign
    a(53, 1), // PLUSEQUAL
    a(54, 1), // MINEQUAL
    a(55, 1), // STAREQUAL
    a(56, 1), // ATEQUAL
    a(57, 1), // SLASHEQUAL
    a(58, 1), // PERCENTEQUAL
    a(59, 1), // AMPEREQUAL
    a(60, 1), // VBAREQUAL
    a(61, 1), // CIRCUMFLEXEQUAL
    a(62, 1), // LEFTSHIFTEQUAL
    a(63, 1), // RIGHTSHIFTEQUAL
    a(64, 1), // DOUBLESTAREQUAL
    a(65, 1), // DOUBLESLASHEQUAL
  ]
  var /* static arc */ arcs_19_1/*[1]*/ = [ // augassign
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_19/*[2]*/ = [ // augassign
    s(arcs_19_0),
    s(arcs_19_1),
  ]
  states_19.d_name = "augassign"
  var /* static arc */ arcs_20_0/*[1]*/ = [ // del_stmt
    a(66, 1), // del
  ]
  var /* static arc */ arcs_20_1/*[1]*/ = [ // del_stmt
    a(67, 2), // exprlist
  ]
  var /* static arc */ arcs_20_2/*[1]*/ = [ // del_stmt
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_20/*[3]*/ = [ // del_stmt
    s(arcs_20_0),
    s(arcs_20_1),
    s(arcs_20_2),
  ]
  states_20.d_name = "del_stmt"
  var /* static arc */ arcs_21_0/*[1]*/ = [ // pass_stmt
    a(68, 1), // pass
  ]
  var /* static arc */ arcs_21_1/*[1]*/ = [ // pass_stmt
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_21/*[2]*/ = [ // pass_stmt
    s(arcs_21_0),
    s(arcs_21_1),
  ]
  states_21.d_name = "pass_stmt"
  var /* static arc */ arcs_22_0/*[5]*/ = [ // flow_stmt
    a(69, 1), // break_stmt
    a(70, 1), // continue_stmt
    a(71, 1), // return_stmt
    a(72, 1), // raise_stmt
    a(73, 1), // yield_stmt
  ]
  var /* static arc */ arcs_22_1/*[1]*/ = [ // flow_stmt
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_22/*[2]*/ = [ // flow_stmt
    s(arcs_22_0),
    s(arcs_22_1),
  ]
  states_22.d_name = "flow_stmt"
  var /* static arc */ arcs_23_0/*[1]*/ = [ // break_stmt
    a(74, 1), // break
  ]
  var /* static arc */ arcs_23_1/*[1]*/ = [ // break_stmt
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_23/*[2]*/ = [ // break_stmt
    s(arcs_23_0),
    s(arcs_23_1),
  ]
  states_23.d_name = "break_stmt"
  var /* static arc */ arcs_24_0/*[1]*/ = [ // continue_stmt
    a(75, 1), // continue
  ]
  var /* static arc */ arcs_24_1/*[1]*/ = [ // continue_stmt
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_24/*[2]*/ = [ // continue_stmt
    s(arcs_24_0),
    s(arcs_24_1),
  ]
  states_24.d_name = "continue_stmt"
  var /* static arc */ arcs_25_0/*[1]*/ = [ // return_stmt
    a(76, 1), // return
  ]
  var /* static arc */ arcs_25_1/*[2]*/ = [ // return_stmt
    a(48, 2), // testlist_star_expr
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_25_2/*[1]*/ = [ // return_stmt
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_25/*[3]*/ = [ // return_stmt
    s(arcs_25_0),
    s(arcs_25_1),
    s(arcs_25_2),
  ]
  states_25.d_name = "return_stmt"
  var /* static arc */ arcs_26_0/*[1]*/ = [ // yield_stmt
    a(51, 1), // yield_expr
  ]
  var /* static arc */ arcs_26_1/*[1]*/ = [ // yield_stmt
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_26/*[2]*/ = [ // yield_stmt
    s(arcs_26_0),
    s(arcs_26_1),
  ]
  states_26.d_name = "yield_stmt"
  var /* static arc */ arcs_27_0/*[1]*/ = [ // raise_stmt
    a(77, 1), // raise
  ]
  var /* static arc */ arcs_27_1/*[2]*/ = [ // raise_stmt
    a(26, 2), // test
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_27_2/*[2]*/ = [ // raise_stmt
    a(78, 3), // from
    a(0, 2), // EMPTY
  ]
  var /* static arc */ arcs_27_3/*[1]*/ = [ // raise_stmt
    a(26, 4), // test
  ]
  var /* static arc */ arcs_27_4/*[1]*/ = [ // raise_stmt
    a(0, 4), // EMPTY
  ]
  var /* static state */ states_27/*[5]*/ = [ // raise_stmt
    s(arcs_27_0),
    s(arcs_27_1),
    s(arcs_27_2),
    s(arcs_27_3),
    s(arcs_27_4),
  ]
  states_27.d_name = "raise_stmt"
  var /* static arc */ arcs_28_0/*[2]*/ = [ // import_stmt
    a(79, 1), // import_name
    a(80, 1), // import_from
  ]
  var /* static arc */ arcs_28_1/*[1]*/ = [ // import_stmt
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_28/*[2]*/ = [ // import_stmt
    s(arcs_28_0),
    s(arcs_28_1),
  ]
  states_28.d_name = "import_stmt"
  var /* static arc */ arcs_29_0/*[1]*/ = [ // import_name
    a(81, 1), // import
  ]
  var /* static arc */ arcs_29_1/*[1]*/ = [ // import_name
    a(82, 2), // dotted_as_names
  ]
  var /* static arc */ arcs_29_2/*[1]*/ = [ // import_name
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_29/*[3]*/ = [ // import_name
    s(arcs_29_0),
    s(arcs_29_1),
    s(arcs_29_2),
  ]
  states_29.d_name = "import_name"
  var /* static arc */ arcs_30_0/*[1]*/ = [ // import_from
    a(78, 1), // from
  ]
  var /* static arc */ arcs_30_1/*[3]*/ = [ // import_from
    a(83, 2), // DOT
    a(84, 2), // ELLIPSIS
    a(12, 3), // dotted_name
  ]
  var /* static arc */ arcs_30_2/*[4]*/ = [ // import_from
    a(83, 2), // DOT
    a(84, 2), // ELLIPSIS
    a(12, 3), // dotted_name
    a(81, 4), // import
  ]
  var /* static arc */ arcs_30_3/*[1]*/ = [ // import_from
    a(81, 4), // import
  ]
  var /* static arc */ arcs_30_4/*[3]*/ = [ // import_from
    a(34, 5), // STAR
    a(13, 6), // LPAR
    a(85, 5), // import_as_names
  ]
  var /* static arc */ arcs_30_5/*[1]*/ = [ // import_from
    a(0, 5), // EMPTY
  ]
  var /* static arc */ arcs_30_6/*[1]*/ = [ // import_from
    a(85, 7), // import_as_names
  ]
  var /* static arc */ arcs_30_7/*[1]*/ = [ // import_from
    a(15, 5), // RPAR
  ]
  var /* static state */ states_30/*[8]*/ = [ // import_from
    s(arcs_30_0),
    s(arcs_30_1),
    s(arcs_30_2),
    s(arcs_30_3),
    s(arcs_30_4),
    s(arcs_30_5),
    s(arcs_30_6),
    s(arcs_30_7),
  ]
  states_30.d_name = "import_from"
  var /* static arc */ arcs_31_0/*[1]*/ = [ // import_as_name
    a(23, 1), // NAME
  ]
  var /* static arc */ arcs_31_1/*[2]*/ = [ // import_as_name
    a(87, 2), // as
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_31_2/*[1]*/ = [ // import_as_name
    a(23, 3), // NAME
  ]
  var /* static arc */ arcs_31_3/*[1]*/ = [ // import_as_name
    a(0, 3), // EMPTY
  ]
  var /* static state */ states_31/*[4]*/ = [ // import_as_name
    s(arcs_31_0),
    s(arcs_31_1),
    s(arcs_31_2),
    s(arcs_31_3),
  ]
  states_31.d_name = "import_as_name"
  var /* static arc */ arcs_32_0/*[1]*/ = [ // dotted_as_name
    a(12, 1), // dotted_name
  ]
  var /* static arc */ arcs_32_1/*[2]*/ = [ // dotted_as_name
    a(87, 2), // as
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_32_2/*[1]*/ = [ // dotted_as_name
    a(23, 3), // NAME
  ]
  var /* static arc */ arcs_32_3/*[1]*/ = [ // dotted_as_name
    a(0, 3), // EMPTY
  ]
  var /* static state */ states_32/*[4]*/ = [ // dotted_as_name
    s(arcs_32_0),
    s(arcs_32_1),
    s(arcs_32_2),
    s(arcs_32_3),
  ]
  states_32.d_name = "dotted_as_name"
  var /* static arc */ arcs_33_0/*[1]*/ = [ // import_as_names
    a(86, 1), // import_as_name
  ]
  var /* static arc */ arcs_33_1/*[2]*/ = [ // import_as_names
    a(33, 2), // COMMA
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_33_2/*[2]*/ = [ // import_as_names
    a(86, 1), // import_as_name
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_33/*[3]*/ = [ // import_as_names
    s(arcs_33_0),
    s(arcs_33_1),
    s(arcs_33_2),
  ]
  states_33.d_name = "import_as_names"
  var /* static arc */ arcs_34_0/*[1]*/ = [ // dotted_as_names
    a(88, 1), // dotted_as_name
  ]
  var /* static arc */ arcs_34_1/*[2]*/ = [ // dotted_as_names
    a(33, 0), // COMMA
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_34/*[2]*/ = [ // dotted_as_names
    s(arcs_34_0),
    s(arcs_34_1),
  ]
  states_34.d_name = "dotted_as_names"
  var /* static arc */ arcs_35_0/*[1]*/ = [ // dotted_name
    a(23, 1), // NAME
  ]
  var /* static arc */ arcs_35_1/*[2]*/ = [ // dotted_name
    a(83, 0), // DOT
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_35/*[2]*/ = [ // dotted_name
    s(arcs_35_0),
    s(arcs_35_1),
  ]
  states_35.d_name = "dotted_name"
  var /* static arc */ arcs_36_0/*[1]*/ = [ // global_stmt
    a(89, 1), // global
  ]
  var /* static arc */ arcs_36_1/*[1]*/ = [ // global_stmt
    a(23, 2), // NAME
  ]
  var /* static arc */ arcs_36_2/*[2]*/ = [ // global_stmt
    a(33, 1), // COMMA
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_36/*[3]*/ = [ // global_stmt
    s(arcs_36_0),
    s(arcs_36_1),
    s(arcs_36_2),
  ]
  states_36.d_name = "global_stmt"
  var /* static arc */ arcs_37_0/*[1]*/ = [ // nonlocal_stmt
    a(90, 1), // nonlocal
  ]
  var /* static arc */ arcs_37_1/*[1]*/ = [ // nonlocal_stmt
    a(23, 2), // NAME
  ]
  var /* static arc */ arcs_37_2/*[2]*/ = [ // nonlocal_stmt
    a(33, 1), // COMMA
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_37/*[3]*/ = [ // nonlocal_stmt
    s(arcs_37_0),
    s(arcs_37_1),
    s(arcs_37_2),
  ]
  states_37.d_name = "nonlocal_stmt"
  var /* static arc */ arcs_38_0/*[1]*/ = [ // assert_stmt
    a(91, 1), // assert
  ]
  var /* static arc */ arcs_38_1/*[1]*/ = [ // assert_stmt
    a(26, 2), // test
  ]
  var /* static arc */ arcs_38_2/*[2]*/ = [ // assert_stmt
    a(33, 3), // COMMA
    a(0, 2), // EMPTY
  ]
  var /* static arc */ arcs_38_3/*[1]*/ = [ // assert_stmt
    a(26, 4), // test
  ]
  var /* static arc */ arcs_38_4/*[1]*/ = [ // assert_stmt
    a(0, 4), // EMPTY
  ]
  var /* static state */ states_38/*[5]*/ = [ // assert_stmt
    s(arcs_38_0),
    s(arcs_38_1),
    s(arcs_38_2),
    s(arcs_38_3),
    s(arcs_38_4),
  ]
  states_38.d_name = "assert_stmt"
  var /* static arc */ arcs_39_0/*[9]*/ = [ // compound_stmt
    a(92, 1), // if_stmt
    a(93, 1), // while_stmt
    a(94, 1), // for_stmt
    a(95, 1), // try_stmt
    a(96, 1), // with_stmt
    a(19, 1), // funcdef
    a(18, 1), // classdef
    a(17, 1), // decorated
    a(97, 1), // async_stmt
  ]
  var /* static arc */ arcs_39_1/*[1]*/ = [ // compound_stmt
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_39/*[2]*/ = [ // compound_stmt
    s(arcs_39_0),
    s(arcs_39_1),
  ]
  states_39.d_name = "compound_stmt"
  var /* static arc */ arcs_40_0/*[1]*/ = [ // async_stmt
    a(21, 1), // async
  ]
  var /* static arc */ arcs_40_1/*[3]*/ = [ // async_stmt
    a(19, 2), // funcdef
    a(96, 2), // with_stmt
    a(94, 2), // for_stmt
  ]
  var /* static arc */ arcs_40_2/*[1]*/ = [ // async_stmt
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_40/*[3]*/ = [ // async_stmt
    s(arcs_40_0),
    s(arcs_40_1),
    s(arcs_40_2),
  ]
  states_40.d_name = "async_stmt"
  var /* static arc */ arcs_41_0/*[1]*/ = [ // if_stmt
    a(98, 1), // if
  ]
  var /* static arc */ arcs_41_1/*[1]*/ = [ // if_stmt
    a(99, 2), // namedexpr_test
  ]
  var /* static arc */ arcs_41_2/*[1]*/ = [ // if_stmt
    a(27, 3), // COLON
  ]
  var /* static arc */ arcs_41_3/*[1]*/ = [ // if_stmt
    a(100, 4), // suite
  ]
  var /* static arc */ arcs_41_4/*[3]*/ = [ // if_stmt
    a(101, 1), // elif
    a(102, 5), // else
    a(0, 4), // EMPTY
  ]
  var /* static arc */ arcs_41_5/*[1]*/ = [ // if_stmt
    a(27, 6), // COLON
  ]
  var /* static arc */ arcs_41_6/*[1]*/ = [ // if_stmt
    a(100, 7), // suite
  ]
  var /* static arc */ arcs_41_7/*[1]*/ = [ // if_stmt
    a(0, 7), // EMPTY
  ]
  var /* static state */ states_41/*[8]*/ = [ // if_stmt
    s(arcs_41_0),
    s(arcs_41_1),
    s(arcs_41_2),
    s(arcs_41_3),
    s(arcs_41_4),
    s(arcs_41_5),
    s(arcs_41_6),
    s(arcs_41_7),
  ]
  states_41.d_name = "if_stmt"
  var /* static arc */ arcs_42_0/*[1]*/ = [ // while_stmt
    a(103, 1), // while
  ]
  var /* static arc */ arcs_42_1/*[1]*/ = [ // while_stmt
    a(99, 2), // namedexpr_test
  ]
  var /* static arc */ arcs_42_2/*[1]*/ = [ // while_stmt
    a(27, 3), // COLON
  ]
  var /* static arc */ arcs_42_3/*[1]*/ = [ // while_stmt
    a(100, 4), // suite
  ]
  var /* static arc */ arcs_42_4/*[2]*/ = [ // while_stmt
    a(102, 5), // else
    a(0, 4), // EMPTY
  ]
  var /* static arc */ arcs_42_5/*[1]*/ = [ // while_stmt
    a(27, 6), // COLON
  ]
  var /* static arc */ arcs_42_6/*[1]*/ = [ // while_stmt
    a(100, 7), // suite
  ]
  var /* static arc */ arcs_42_7/*[1]*/ = [ // while_stmt
    a(0, 7), // EMPTY
  ]
  var /* static state */ states_42/*[8]*/ = [ // while_stmt
    s(arcs_42_0),
    s(arcs_42_1),
    s(arcs_42_2),
    s(arcs_42_3),
    s(arcs_42_4),
    s(arcs_42_5),
    s(arcs_42_6),
    s(arcs_42_7),
  ]
  states_42.d_name = "while_stmt"
  var /* static arc */ arcs_43_0/*[1]*/ = [ // for_stmt
    a(104, 1), // for
  ]
  var /* static arc */ arcs_43_1/*[1]*/ = [ // for_stmt
    a(67, 2), // exprlist
  ]
  var /* static arc */ arcs_43_2/*[1]*/ = [ // for_stmt
    a(105, 3), // in
  ]
  var /* static arc */ arcs_43_3/*[1]*/ = [ // for_stmt
    a(9, 4), // testlist
  ]
  var /* static arc */ arcs_43_4/*[1]*/ = [ // for_stmt
    a(27, 5), // COLON
  ]
  var /* static arc */ arcs_43_5/*[2]*/ = [ // for_stmt
    a(28, 6), // TYPE_COMMENT
    a(100, 7), // suite
  ]
  var /* static arc */ arcs_43_6/*[1]*/ = [ // for_stmt
    a(100, 7), // suite
  ]
  var /* static arc */ arcs_43_7/*[2]*/ = [ // for_stmt
    a(102, 8), // else
    a(0, 7), // EMPTY
  ]
  var /* static arc */ arcs_43_8/*[1]*/ = [ // for_stmt
    a(27, 9), // COLON
  ]
  var /* static arc */ arcs_43_9/*[1]*/ = [ // for_stmt
    a(100, 10), // suite
  ]
  var /* static arc */ arcs_43_10/*[1]*/ = [ // for_stmt
    a(0, 10), // EMPTY
  ]
  var /* static state */ states_43/*[11]*/ = [ // for_stmt
    s(arcs_43_0),
    s(arcs_43_1),
    s(arcs_43_2),
    s(arcs_43_3),
    s(arcs_43_4),
    s(arcs_43_5),
    s(arcs_43_6),
    s(arcs_43_7),
    s(arcs_43_8),
    s(arcs_43_9),
    s(arcs_43_10),
  ]
  states_43.d_name = "for_stmt"
  var /* static arc */ arcs_44_0/*[1]*/ = [ // try_stmt
    a(106, 1), // try
  ]
  var /* static arc */ arcs_44_1/*[1]*/ = [ // try_stmt
    a(27, 2), // COLON
  ]
  var /* static arc */ arcs_44_2/*[1]*/ = [ // try_stmt
    a(100, 3), // suite
  ]
  var /* static arc */ arcs_44_3/*[2]*/ = [ // try_stmt
    a(107, 4), // except_clause
    a(108, 5), // finally
  ]
  var /* static arc */ arcs_44_4/*[1]*/ = [ // try_stmt
    a(27, 6), // COLON
  ]
  var /* static arc */ arcs_44_5/*[1]*/ = [ // try_stmt
    a(27, 7), // COLON
  ]
  var /* static arc */ arcs_44_6/*[1]*/ = [ // try_stmt
    a(100, 8), // suite
  ]
  var /* static arc */ arcs_44_7/*[1]*/ = [ // try_stmt
    a(100, 9), // suite
  ]
  var /* static arc */ arcs_44_8/*[4]*/ = [ // try_stmt
    a(107, 4), // except_clause
    a(102, 10), // else
    a(108, 5), // finally
    a(0, 8), // EMPTY
  ]
  var /* static arc */ arcs_44_9/*[1]*/ = [ // try_stmt
    a(0, 9), // EMPTY
  ]
  var /* static arc */ arcs_44_10/*[1]*/ = [ // try_stmt
    a(27, 11), // COLON
  ]
  var /* static arc */ arcs_44_11/*[1]*/ = [ // try_stmt
    a(100, 12), // suite
  ]
  var /* static arc */ arcs_44_12/*[2]*/ = [ // try_stmt
    a(108, 5), // finally
    a(0, 12), // EMPTY
  ]
  var /* static state */ states_44/*[13]*/ = [ // try_stmt
    s(arcs_44_0),
    s(arcs_44_1),
    s(arcs_44_2),
    s(arcs_44_3),
    s(arcs_44_4),
    s(arcs_44_5),
    s(arcs_44_6),
    s(arcs_44_7),
    s(arcs_44_8),
    s(arcs_44_9),
    s(arcs_44_10),
    s(arcs_44_11),
    s(arcs_44_12),
  ]
  states_44.d_name = "try_stmt"
  var /* static arc */ arcs_45_0/*[1]*/ = [ // with_stmt
    a(109, 1), // with
  ]
  var /* static arc */ arcs_45_1/*[1]*/ = [ // with_stmt
    a(110, 2), // with_item
  ]
  var /* static arc */ arcs_45_2/*[2]*/ = [ // with_stmt
    a(33, 1), // COMMA
    a(27, 3), // COLON
  ]
  var /* static arc */ arcs_45_3/*[2]*/ = [ // with_stmt
    a(28, 4), // TYPE_COMMENT
    a(100, 5), // suite
  ]
  var /* static arc */ arcs_45_4/*[1]*/ = [ // with_stmt
    a(100, 5), // suite
  ]
  var /* static arc */ arcs_45_5/*[1]*/ = [ // with_stmt
    a(0, 5), // EMPTY
  ]
  var /* static state */ states_45/*[6]*/ = [ // with_stmt
    s(arcs_45_0),
    s(arcs_45_1),
    s(arcs_45_2),
    s(arcs_45_3),
    s(arcs_45_4),
    s(arcs_45_5),
  ]
  states_45.d_name = "with_stmt"
  var /* static arc */ arcs_46_0/*[1]*/ = [ // with_item
    a(26, 1), // test
  ]
  var /* static arc */ arcs_46_1/*[2]*/ = [ // with_item
    a(87, 2), // as
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_46_2/*[1]*/ = [ // with_item
    a(111, 3), // expr
  ]
  var /* static arc */ arcs_46_3/*[1]*/ = [ // with_item
    a(0, 3), // EMPTY
  ]
  var /* static state */ states_46/*[4]*/ = [ // with_item
    s(arcs_46_0),
    s(arcs_46_1),
    s(arcs_46_2),
    s(arcs_46_3),
  ]
  states_46.d_name = "with_item"
  var /* static arc */ arcs_47_0/*[1]*/ = [ // except_clause
    a(112, 1), // except
  ]
  var /* static arc */ arcs_47_1/*[2]*/ = [ // except_clause
    a(26, 2), // test
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_47_2/*[2]*/ = [ // except_clause
    a(87, 3), // as
    a(0, 2), // EMPTY
  ]
  var /* static arc */ arcs_47_3/*[1]*/ = [ // except_clause
    a(23, 4), // NAME
  ]
  var /* static arc */ arcs_47_4/*[1]*/ = [ // except_clause
    a(0, 4), // EMPTY
  ]
  var /* static state */ states_47/*[5]*/ = [ // except_clause
    s(arcs_47_0),
    s(arcs_47_1),
    s(arcs_47_2),
    s(arcs_47_3),
    s(arcs_47_4),
  ]
  states_47.d_name = "except_clause"
  var /* static arc */ arcs_48_0/*[2]*/ = [ // suite
    a(3, 1), // simple_stmt
    a(2, 2), // NEWLINE
  ]
  var /* static arc */ arcs_48_1/*[1]*/ = [ // suite
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_48_2/*[1]*/ = [ // suite
    a(113, 3), // INDENT
  ]
  var /* static arc */ arcs_48_3/*[1]*/ = [ // suite
    a(6, 4), // stmt
  ]
  var /* static arc */ arcs_48_4/*[2]*/ = [ // suite
    a(6, 4), // stmt
    a(114, 1), // DEDENT
  ]
  var /* static state */ states_48/*[5]*/ = [ // suite
    s(arcs_48_0),
    s(arcs_48_1),
    s(arcs_48_2),
    s(arcs_48_3),
    s(arcs_48_4),
  ]
  states_48.d_name = "suite"
  var /* static arc */ arcs_49_0/*[1]*/ = [ // namedexpr_test
    a(26, 1), // test
  ]
  var /* static arc */ arcs_49_1/*[2]*/ = [ // namedexpr_test
    a(115, 2), // COLONEQUAL
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_49_2/*[1]*/ = [ // namedexpr_test
    a(26, 3), // test
  ]
  var /* static arc */ arcs_49_3/*[1]*/ = [ // namedexpr_test
    a(0, 3), // EMPTY
  ]
  var /* static state */ states_49/*[4]*/ = [ // namedexpr_test
    s(arcs_49_0),
    s(arcs_49_1),
    s(arcs_49_2),
    s(arcs_49_3),
  ]
  states_49.d_name = "namedexpr_test"
  var /* static arc */ arcs_50_0/*[2]*/ = [ // test
    a(116, 1), // or_test
    a(117, 2), // lambdef
  ]
  var /* static arc */ arcs_50_1/*[2]*/ = [ // test
    a(98, 3), // if
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_50_2/*[1]*/ = [ // test
    a(0, 2), // EMPTY
  ]
  var /* static arc */ arcs_50_3/*[1]*/ = [ // test
    a(116, 4), // or_test
  ]
  var /* static arc */ arcs_50_4/*[1]*/ = [ // test
    a(102, 5), // else
  ]
  var /* static arc */ arcs_50_5/*[1]*/ = [ // test
    a(26, 2), // test
  ]
  var /* static state */ states_50/*[6]*/ = [ // test
    s(arcs_50_0),
    s(arcs_50_1),
    s(arcs_50_2),
    s(arcs_50_3),
    s(arcs_50_4),
    s(arcs_50_5),
  ]
  states_50.d_name = "test"
  var /* static arc */ arcs_51_0/*[2]*/ = [ // test_nocond
    a(116, 1), // or_test
    a(119, 1), // lambdef_nocond
  ]
  var /* static arc */ arcs_51_1/*[1]*/ = [ // test_nocond
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_51/*[2]*/ = [ // test_nocond
    s(arcs_51_0),
    s(arcs_51_1),
  ]
  states_51.d_name = "test_nocond"
  var /* static arc */ arcs_52_0/*[1]*/ = [ // lambdef
    a(120, 1), // lambda
  ]
  var /* static arc */ arcs_52_1/*[2]*/ = [ // lambdef
    a(36, 2), // varargslist
    a(27, 3), // COLON
  ]
  var /* static arc */ arcs_52_2/*[1]*/ = [ // lambdef
    a(27, 3), // COLON
  ]
  var /* static arc */ arcs_52_3/*[1]*/ = [ // lambdef
    a(26, 4), // test
  ]
  var /* static arc */ arcs_52_4/*[1]*/ = [ // lambdef
    a(0, 4), // EMPTY
  ]
  var /* static state */ states_52/*[5]*/ = [ // lambdef
    s(arcs_52_0),
    s(arcs_52_1),
    s(arcs_52_2),
    s(arcs_52_3),
    s(arcs_52_4),
  ]
  states_52.d_name = "lambdef"
  var /* static arc */ arcs_53_0/*[1]*/ = [ // lambdef_nocond
    a(120, 1), // lambda
  ]
  var /* static arc */ arcs_53_1/*[2]*/ = [ // lambdef_nocond
    a(36, 2), // varargslist
    a(27, 3), // COLON
  ]
  var /* static arc */ arcs_53_2/*[1]*/ = [ // lambdef_nocond
    a(27, 3), // COLON
  ]
  var /* static arc */ arcs_53_3/*[1]*/ = [ // lambdef_nocond
    a(118, 4), // test_nocond
  ]
  var /* static arc */ arcs_53_4/*[1]*/ = [ // lambdef_nocond
    a(0, 4), // EMPTY
  ]
  var /* static state */ states_53/*[5]*/ = [ // lambdef_nocond
    s(arcs_53_0),
    s(arcs_53_1),
    s(arcs_53_2),
    s(arcs_53_3),
    s(arcs_53_4),
  ]
  states_53.d_name = "lambdef_nocond"
  var /* static arc */ arcs_54_0/*[1]*/ = [ // or_test
    a(121, 1), // and_test
  ]
  var /* static arc */ arcs_54_1/*[2]*/ = [ // or_test
    a(122, 0), // or
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_54/*[2]*/ = [ // or_test
    s(arcs_54_0),
    s(arcs_54_1),
  ]
  states_54.d_name = "or_test"
  var /* static arc */ arcs_55_0/*[1]*/ = [ // and_test
    a(123, 1), // not_test
  ]
  var /* static arc */ arcs_55_1/*[2]*/ = [ // and_test
    a(124, 0), // and
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_55/*[2]*/ = [ // and_test
    s(arcs_55_0),
    s(arcs_55_1),
  ]
  states_55.d_name = "and_test"
  var /* static arc */ arcs_56_0/*[2]*/ = [ // not_test
    a(125, 1), // not
    a(126, 2), // comparison
  ]
  var /* static arc */ arcs_56_1/*[1]*/ = [ // not_test
    a(123, 2), // not_test
  ]
  var /* static arc */ arcs_56_2/*[1]*/ = [ // not_test
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_56/*[3]*/ = [ // not_test
    s(arcs_56_0),
    s(arcs_56_1),
    s(arcs_56_2),
  ]
  states_56.d_name = "not_test"
  var /* static arc */ arcs_57_0/*[1]*/ = [ // comparison
    a(111, 1), // expr
  ]
  var /* static arc */ arcs_57_1/*[2]*/ = [ // comparison
    a(127, 0), // comp_op
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_57/*[2]*/ = [ // comparison
    s(arcs_57_0),
    s(arcs_57_1),
  ]
  states_57.d_name = "comparison"
  var /* static arc */ arcs_58_0/*[10]*/ = [ // comp_op
    a(128, 1), // LESS
    a(129, 1), // GREATER
    a(130, 1), // EQEQUAL
    a(131, 1), // GREATEREQUAL
    a(132, 1), // LESSEQUAL
    a(133, 1), // NOTEQUAL
    a(134, 1), // NOTEQUAL
    a(105, 1), // in
    a(125, 2), // not
    a(135, 3), // is
  ]
  var /* static arc */ arcs_58_1/*[1]*/ = [ // comp_op
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_58_2/*[1]*/ = [ // comp_op
    a(105, 1), // in
  ]
  var /* static arc */ arcs_58_3/*[2]*/ = [ // comp_op
    a(125, 1), // not
    a(0, 3), // EMPTY
  ]
  var /* static state */ states_58/*[4]*/ = [ // comp_op
    s(arcs_58_0),
    s(arcs_58_1),
    s(arcs_58_2),
    s(arcs_58_3),
  ]
  states_58.d_name = "comp_op"
  var /* static arc */ arcs_59_0/*[1]*/ = [ // star_expr
    a(34, 1), // STAR
  ]
  var /* static arc */ arcs_59_1/*[1]*/ = [ // star_expr
    a(111, 2), // expr
  ]
  var /* static arc */ arcs_59_2/*[1]*/ = [ // star_expr
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_59/*[3]*/ = [ // star_expr
    s(arcs_59_0),
    s(arcs_59_1),
    s(arcs_59_2),
  ]
  states_59.d_name = "star_expr"
  var /* static arc */ arcs_60_0/*[1]*/ = [ // expr
    a(136, 1), // xor_expr
  ]
  var /* static arc */ arcs_60_1/*[2]*/ = [ // expr
    a(137, 0), // VBAR
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_60/*[2]*/ = [ // expr
    s(arcs_60_0),
    s(arcs_60_1),
  ]
  states_60.d_name = "expr"
  var /* static arc */ arcs_61_0/*[1]*/ = [ // xor_expr
    a(138, 1), // and_expr
  ]
  var /* static arc */ arcs_61_1/*[2]*/ = [ // xor_expr
    a(139, 0), // CIRCUMFLEX
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_61/*[2]*/ = [ // xor_expr
    s(arcs_61_0),
    s(arcs_61_1),
  ]
  states_61.d_name = "xor_expr"
  var /* static arc */ arcs_62_0/*[1]*/ = [ // and_expr
    a(140, 1), // shift_expr
  ]
  var /* static arc */ arcs_62_1/*[2]*/ = [ // and_expr
    a(141, 0), // AMPER
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_62/*[2]*/ = [ // and_expr
    s(arcs_62_0),
    s(arcs_62_1),
  ]
  states_62.d_name = "and_expr"
  var /* static arc */ arcs_63_0/*[1]*/ = [ // shift_expr
    a(142, 1), // arith_expr
  ]
  var /* static arc */ arcs_63_1/*[3]*/ = [ // shift_expr
    a(143, 0), // LEFTSHIFT
    a(144, 0), // RIGHTSHIFT
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_63/*[2]*/ = [ // shift_expr
    s(arcs_63_0),
    s(arcs_63_1),
  ]
  states_63.d_name = "shift_expr"
  var /* static arc */ arcs_64_0/*[1]*/ = [ // arith_expr
    a(145, 1), // term
  ]
  var /* static arc */ arcs_64_1/*[3]*/ = [ // arith_expr
    a(146, 0), // PLUS
    a(147, 0), // MINUS
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_64/*[2]*/ = [ // arith_expr
    s(arcs_64_0),
    s(arcs_64_1),
  ]
  states_64.d_name = "arith_expr"
  var /* static arc */ arcs_65_0/*[1]*/ = [ // term
    a(148, 1), // factor
  ]
  var /* static arc */ arcs_65_1/*[6]*/ = [ // term
    a(34, 0), // STAR
    a(11, 0), // AT
    a(149, 0), // SLASH
    a(150, 0), // PERCENT
    a(151, 0), // DOUBLESLASH
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_65/*[2]*/ = [ // term
    s(arcs_65_0),
    s(arcs_65_1),
  ]
  states_65.d_name = "term"
  var /* static arc */ arcs_66_0/*[4]*/ = [ // factor
    a(146, 1), // PLUS
    a(147, 1), // MINUS
    a(152, 1), // TILDE
    a(153, 2), // power
  ]
  var /* static arc */ arcs_66_1/*[1]*/ = [ // factor
    a(148, 2), // factor
  ]
  var /* static arc */ arcs_66_2/*[1]*/ = [ // factor
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_66/*[3]*/ = [ // factor
    s(arcs_66_0),
    s(arcs_66_1),
    s(arcs_66_2),
  ]
  states_66.d_name = "factor"
  var /* static arc */ arcs_67_0/*[1]*/ = [ // power
    a(154, 1), // atom_expr
  ]
  var /* static arc */ arcs_67_1/*[2]*/ = [ // power
    a(35, 2), // DOUBLESTAR
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_67_2/*[1]*/ = [ // power
    a(148, 3), // factor
  ]
  var /* static arc */ arcs_67_3/*[1]*/ = [ // power
    a(0, 3), // EMPTY
  ]
  var /* static state */ states_67/*[4]*/ = [ // power
    s(arcs_67_0),
    s(arcs_67_1),
    s(arcs_67_2),
    s(arcs_67_3),
  ]
  states_67.d_name = "power"
  var /* static arc */ arcs_68_0/*[2]*/ = [ // atom_expr
    a(155, 1), // await
    a(156, 2), // atom
  ]
  var /* static arc */ arcs_68_1/*[1]*/ = [ // atom_expr
    a(156, 2), // atom
  ]
  var /* static arc */ arcs_68_2/*[2]*/ = [ // atom_expr
    a(157, 2), // trailer
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_68/*[3]*/ = [ // atom_expr
    s(arcs_68_0),
    s(arcs_68_1),
    s(arcs_68_2),
  ]
  states_68.d_name = "atom_expr"
  var /* static arc */ arcs_69_0/*[10]*/ = [ // atom
    a(13, 1), // LPAR
    a(159, 2), // LSQB
    a(161, 3), // LBRACE
    a(23, 4), // NAME
    a(164, 4), // NUMBER
    a(165, 5), // STRING
    a(84, 4), // ELLIPSIS
    a(166, 4), // None
    a(167, 4), // True
    a(168, 4), // False
  ]
  var /* static arc */ arcs_69_1/*[3]*/ = [ // atom
    a(51, 6), // yield_expr
    a(158, 6), // testlist_comp
    a(15, 4), // RPAR
  ]
  var /* static arc */ arcs_69_2/*[2]*/ = [ // atom
    a(158, 7), // testlist_comp
    a(160, 4), // RSQB
  ]
  var /* static arc */ arcs_69_3/*[2]*/ = [ // atom
    a(162, 8), // dictorsetmaker
    a(163, 4), // RBRACE
  ]
  var /* static arc */ arcs_69_4/*[1]*/ = [ // atom
    a(0, 4), // EMPTY
  ]
  var /* static arc */ arcs_69_5/*[2]*/ = [ // atom
    a(165, 5), // STRING
    a(0, 5), // EMPTY
  ]
  var /* static arc */ arcs_69_6/*[1]*/ = [ // atom
    a(15, 4), // RPAR
  ]
  var /* static arc */ arcs_69_7/*[1]*/ = [ // atom
    a(160, 4), // RSQB
  ]
  var /* static arc */ arcs_69_8/*[1]*/ = [ // atom
    a(163, 4), // RBRACE
  ]
  var /* static state */ states_69/*[9]*/ = [ // atom
    s(arcs_69_0),
    s(arcs_69_1),
    s(arcs_69_2),
    s(arcs_69_3),
    s(arcs_69_4),
    s(arcs_69_5),
    s(arcs_69_6),
    s(arcs_69_7),
    s(arcs_69_8),
  ]
  states_69.d_name = "atom"
  var /* static arc */ arcs_70_0/*[2]*/ = [ // testlist_comp
    a(99, 1), // namedexpr_test
    a(52, 1), // star_expr
  ]
  var /* static arc */ arcs_70_1/*[3]*/ = [ // testlist_comp
    a(169, 2), // comp_for
    a(33, 3), // COMMA
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_70_2/*[1]*/ = [ // testlist_comp
    a(0, 2), // EMPTY
  ]
  var /* static arc */ arcs_70_3/*[3]*/ = [ // testlist_comp
    a(99, 4), // namedexpr_test
    a(52, 4), // star_expr
    a(0, 3), // EMPTY
  ]
  var /* static arc */ arcs_70_4/*[2]*/ = [ // testlist_comp
    a(33, 3), // COMMA
    a(0, 4), // EMPTY
  ]
  var /* static state */ states_70/*[5]*/ = [ // testlist_comp
    s(arcs_70_0),
    s(arcs_70_1),
    s(arcs_70_2),
    s(arcs_70_3),
    s(arcs_70_4),
  ]
  states_70.d_name = "testlist_comp"
  var /* static arc */ arcs_71_0/*[3]*/ = [ // trailer
    a(13, 1), // LPAR
    a(159, 2), // LSQB
    a(83, 3), // DOT
  ]
  var /* static arc */ arcs_71_1/*[2]*/ = [ // trailer
    a(14, 4), // arglist
    a(15, 5), // RPAR
  ]
  var /* static arc */ arcs_71_2/*[1]*/ = [ // trailer
    a(170, 6), // subscriptlist
  ]
  var /* static arc */ arcs_71_3/*[1]*/ = [ // trailer
    a(23, 5), // NAME
  ]
  var /* static arc */ arcs_71_4/*[1]*/ = [ // trailer
    a(15, 5), // RPAR
  ]
  var /* static arc */ arcs_71_5/*[1]*/ = [ // trailer
    a(0, 5), // EMPTY
  ]
  var /* static arc */ arcs_71_6/*[1]*/ = [ // trailer
    a(160, 5), // RSQB
  ]
  var /* static state */ states_71/*[7]*/ = [ // trailer
    s(arcs_71_0),
    s(arcs_71_1),
    s(arcs_71_2),
    s(arcs_71_3),
    s(arcs_71_4),
    s(arcs_71_5),
    s(arcs_71_6),
  ]
  states_71.d_name = "trailer"
  var /* static arc */ arcs_72_0/*[1]*/ = [ // subscriptlist
    a(171, 1), // subscript
  ]
  var /* static arc */ arcs_72_1/*[2]*/ = [ // subscriptlist
    a(33, 2), // COMMA
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_72_2/*[2]*/ = [ // subscriptlist
    a(171, 1), // subscript
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_72/*[3]*/ = [ // subscriptlist
    s(arcs_72_0),
    s(arcs_72_1),
    s(arcs_72_2),
  ]
  states_72.d_name = "subscriptlist"
  var /* static arc */ arcs_73_0/*[2]*/ = [ // subscript
    a(26, 1), // test
    a(27, 2), // COLON
  ]
  var /* static arc */ arcs_73_1/*[2]*/ = [ // subscript
    a(27, 2), // COLON
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_73_2/*[3]*/ = [ // subscript
    a(26, 3), // test
    a(172, 4), // sliceop
    a(0, 2), // EMPTY
  ]
  var /* static arc */ arcs_73_3/*[2]*/ = [ // subscript
    a(172, 4), // sliceop
    a(0, 3), // EMPTY
  ]
  var /* static arc */ arcs_73_4/*[1]*/ = [ // subscript
    a(0, 4), // EMPTY
  ]
  var /* static state */ states_73/*[5]*/ = [ // subscript
    s(arcs_73_0),
    s(arcs_73_1),
    s(arcs_73_2),
    s(arcs_73_3),
    s(arcs_73_4),
  ]
  states_73.d_name = "subscript"
  var /* static arc */ arcs_74_0/*[1]*/ = [ // sliceop
    a(27, 1), // COLON
  ]
  var /* static arc */ arcs_74_1/*[2]*/ = [ // sliceop
    a(26, 2), // test
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_74_2/*[1]*/ = [ // sliceop
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_74/*[3]*/ = [ // sliceop
    s(arcs_74_0),
    s(arcs_74_1),
    s(arcs_74_2),
  ]
  states_74.d_name = "sliceop"
  var /* static arc */ arcs_75_0/*[2]*/ = [ // exprlist
    a(111, 1), // expr
    a(52, 1), // star_expr
  ]
  var /* static arc */ arcs_75_1/*[2]*/ = [ // exprlist
    a(33, 2), // COMMA
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_75_2/*[3]*/ = [ // exprlist
    a(111, 1), // expr
    a(52, 1), // star_expr
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_75/*[3]*/ = [ // exprlist
    s(arcs_75_0),
    s(arcs_75_1),
    s(arcs_75_2),
  ]
  states_75.d_name = "exprlist"
  var /* static arc */ arcs_76_0/*[1]*/ = [ // testlist
    a(26, 1), // test
  ]
  var /* static arc */ arcs_76_1/*[2]*/ = [ // testlist
    a(33, 2), // COMMA
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_76_2/*[2]*/ = [ // testlist
    a(26, 1), // test
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_76/*[3]*/ = [ // testlist
    s(arcs_76_0),
    s(arcs_76_1),
    s(arcs_76_2),
  ]
  states_76.d_name = "testlist"
  var /* static arc */ arcs_77_0/*[3]*/ = [ // dictorsetmaker
    a(26, 1), // test
    a(35, 2), // DOUBLESTAR
    a(52, 3), // star_expr
  ]
  var /* static arc */ arcs_77_1/*[4]*/ = [ // dictorsetmaker
    a(27, 4), // COLON
    a(169, 5), // comp_for
    a(33, 6), // COMMA
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_77_2/*[1]*/ = [ // dictorsetmaker
    a(111, 7), // expr
  ]
  var /* static arc */ arcs_77_3/*[3]*/ = [ // dictorsetmaker
    a(169, 5), // comp_for
    a(33, 6), // COMMA
    a(0, 3), // EMPTY
  ]
  var /* static arc */ arcs_77_4/*[1]*/ = [ // dictorsetmaker
    a(26, 7), // test
  ]
  var /* static arc */ arcs_77_5/*[1]*/ = [ // dictorsetmaker
    a(0, 5), // EMPTY
  ]
  var /* static arc */ arcs_77_6/*[3]*/ = [ // dictorsetmaker
    a(26, 8), // test
    a(52, 8), // star_expr
    a(0, 6), // EMPTY
  ]
  var /* static arc */ arcs_77_7/*[3]*/ = [ // dictorsetmaker
    a(169, 5), // comp_for
    a(33, 9), // COMMA
    a(0, 7), // EMPTY
  ]
  var /* static arc */ arcs_77_8/*[2]*/ = [ // dictorsetmaker
    a(33, 6), // COMMA
    a(0, 8), // EMPTY
  ]
  var /* static arc */ arcs_77_9/*[3]*/ = [ // dictorsetmaker
    a(26, 10), // test
    a(35, 11), // DOUBLESTAR
    a(0, 9), // EMPTY
  ]
  var /* static arc */ arcs_77_10/*[1]*/ = [ // dictorsetmaker
    a(27, 12), // COLON
  ]
  var /* static arc */ arcs_77_11/*[1]*/ = [ // dictorsetmaker
    a(111, 13), // expr
  ]
  var /* static arc */ arcs_77_12/*[1]*/ = [ // dictorsetmaker
    a(26, 13), // test
  ]
  var /* static arc */ arcs_77_13/*[2]*/ = [ // dictorsetmaker
    a(33, 9), // COMMA
    a(0, 13), // EMPTY
  ]
  var /* static state */ states_77/*[14]*/ = [ // dictorsetmaker
    s(arcs_77_0),
    s(arcs_77_1),
    s(arcs_77_2),
    s(arcs_77_3),
    s(arcs_77_4),
    s(arcs_77_5),
    s(arcs_77_6),
    s(arcs_77_7),
    s(arcs_77_8),
    s(arcs_77_9),
    s(arcs_77_10),
    s(arcs_77_11),
    s(arcs_77_12),
    s(arcs_77_13),
  ]
  states_77.d_name = "dictorsetmaker"
  var /* static arc */ arcs_78_0/*[1]*/ = [ // classdef
    a(173, 1), // class
  ]
  var /* static arc */ arcs_78_1/*[1]*/ = [ // classdef
    a(23, 2), // NAME
  ]
  var /* static arc */ arcs_78_2/*[2]*/ = [ // classdef
    a(13, 3), // LPAR
    a(27, 4), // COLON
  ]
  var /* static arc */ arcs_78_3/*[2]*/ = [ // classdef
    a(14, 5), // arglist
    a(15, 6), // RPAR
  ]
  var /* static arc */ arcs_78_4/*[1]*/ = [ // classdef
    a(100, 7), // suite
  ]
  var /* static arc */ arcs_78_5/*[1]*/ = [ // classdef
    a(15, 6), // RPAR
  ]
  var /* static arc */ arcs_78_6/*[1]*/ = [ // classdef
    a(27, 4), // COLON
  ]
  var /* static arc */ arcs_78_7/*[1]*/ = [ // classdef
    a(0, 7), // EMPTY
  ]
  var /* static state */ states_78/*[8]*/ = [ // classdef
    s(arcs_78_0),
    s(arcs_78_1),
    s(arcs_78_2),
    s(arcs_78_3),
    s(arcs_78_4),
    s(arcs_78_5),
    s(arcs_78_6),
    s(arcs_78_7),
  ]
  states_78.d_name = "classdef"
  var /* static arc */ arcs_79_0/*[1]*/ = [ // arglist
    a(174, 1), // argument
  ]
  var /* static arc */ arcs_79_1/*[2]*/ = [ // arglist
    a(33, 2), // COMMA
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_79_2/*[2]*/ = [ // arglist
    a(174, 1), // argument
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_79/*[3]*/ = [ // arglist
    s(arcs_79_0),
    s(arcs_79_1),
    s(arcs_79_2),
  ]
  states_79.d_name = "arglist"
  var /* static arc */ arcs_80_0/*[3]*/ = [ // argument
    a(26, 1), // test
    a(35, 2), // DOUBLESTAR
    a(34, 2), // STAR
  ]
  var /* static arc */ arcs_80_1/*[4]*/ = [ // argument
    a(169, 3), // comp_for
    a(115, 2), // COLONEQUAL
    a(32, 2), // EQUAL
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_80_2/*[1]*/ = [ // argument
    a(26, 3), // test
  ]
  var /* static arc */ arcs_80_3/*[1]*/ = [ // argument
    a(0, 3), // EMPTY
  ]
  var /* static state */ states_80/*[4]*/ = [ // argument
    s(arcs_80_0),
    s(arcs_80_1),
    s(arcs_80_2),
    s(arcs_80_3),
  ]
  states_80.d_name = "argument"
  var /* static arc */ arcs_81_0/*[2]*/ = [ // comp_iter
    a(169, 1), // comp_for
    a(176, 1), // comp_if
  ]
  var /* static arc */ arcs_81_1/*[1]*/ = [ // comp_iter
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_81/*[2]*/ = [ // comp_iter
    s(arcs_81_0),
    s(arcs_81_1),
  ]
  states_81.d_name = "comp_iter"
  var /* static arc */ arcs_82_0/*[1]*/ = [ // sync_comp_for
    a(104, 1), // for
  ]
  var /* static arc */ arcs_82_1/*[1]*/ = [ // sync_comp_for
    a(67, 2), // exprlist
  ]
  var /* static arc */ arcs_82_2/*[1]*/ = [ // sync_comp_for
    a(105, 3), // in
  ]
  var /* static arc */ arcs_82_3/*[1]*/ = [ // sync_comp_for
    a(116, 4), // or_test
  ]
  var /* static arc */ arcs_82_4/*[2]*/ = [ // sync_comp_for
    a(175, 5), // comp_iter
    a(0, 4), // EMPTY
  ]
  var /* static arc */ arcs_82_5/*[1]*/ = [ // sync_comp_for
    a(0, 5), // EMPTY
  ]
  var /* static state */ states_82/*[6]*/ = [ // sync_comp_for
    s(arcs_82_0),
    s(arcs_82_1),
    s(arcs_82_2),
    s(arcs_82_3),
    s(arcs_82_4),
    s(arcs_82_5),
  ]
  states_82.d_name = "sync_comp_for"
  var /* static arc */ arcs_83_0/*[2]*/ = [ // comp_for
    a(21, 1), // async
    a(177, 2), // sync_comp_for
  ]
  var /* static arc */ arcs_83_1/*[1]*/ = [ // comp_for
    a(177, 2), // sync_comp_for
  ]
  var /* static arc */ arcs_83_2/*[1]*/ = [ // comp_for
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_83/*[3]*/ = [ // comp_for
    s(arcs_83_0),
    s(arcs_83_1),
    s(arcs_83_2),
  ]
  states_83.d_name = "comp_for"
  var /* static arc */ arcs_84_0/*[1]*/ = [ // comp_if
    a(98, 1), // if
  ]
  var /* static arc */ arcs_84_1/*[1]*/ = [ // comp_if
    a(118, 2), // test_nocond
  ]
  var /* static arc */ arcs_84_2/*[2]*/ = [ // comp_if
    a(175, 3), // comp_iter
    a(0, 2), // EMPTY
  ]
  var /* static arc */ arcs_84_3/*[1]*/ = [ // comp_if
    a(0, 3), // EMPTY
  ]
  var /* static state */ states_84/*[4]*/ = [ // comp_if
    s(arcs_84_0),
    s(arcs_84_1),
    s(arcs_84_2),
    s(arcs_84_3),
  ]
  states_84.d_name = "comp_if"
  var /* static arc */ arcs_85_0/*[1]*/ = [ // encoding_decl
    a(23, 1), // NAME
  ]
  var /* static arc */ arcs_85_1/*[1]*/ = [ // encoding_decl
    a(0, 1), // EMPTY
  ]
  var /* static state */ states_85/*[2]*/ = [ // encoding_decl
    s(arcs_85_0),
    s(arcs_85_1),
  ]
  states_85.d_name = "encoding_decl"
  var /* static arc */ arcs_86_0/*[1]*/ = [ // yield_expr
    a(179, 1), // yield
  ]
  var /* static arc */ arcs_86_1/*[2]*/ = [ // yield_expr
    a(180, 2), // yield_arg
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_86_2/*[1]*/ = [ // yield_expr
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_86/*[3]*/ = [ // yield_expr
    s(arcs_86_0),
    s(arcs_86_1),
    s(arcs_86_2),
  ]
  states_86.d_name = "yield_expr"
  var /* static arc */ arcs_87_0/*[2]*/ = [ // yield_arg
    a(78, 1), // from
    a(48, 2), // testlist_star_expr
  ]
  var /* static arc */ arcs_87_1/*[1]*/ = [ // yield_arg
    a(26, 2), // test
  ]
  var /* static arc */ arcs_87_2/*[1]*/ = [ // yield_arg
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_87/*[3]*/ = [ // yield_arg
    s(arcs_87_0),
    s(arcs_87_1),
    s(arcs_87_2),
  ]
  states_87.d_name = "yield_arg"
  var /* static arc */ arcs_88_0/*[2]*/ = [ // func_body_suite
    a(3, 1), // simple_stmt
    a(2, 2), // NEWLINE
  ]
  var /* static arc */ arcs_88_1/*[1]*/ = [ // func_body_suite
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_88_2/*[2]*/ = [ // func_body_suite
    a(28, 3), // TYPE_COMMENT
    a(113, 4), // INDENT
  ]
  var /* static arc */ arcs_88_3/*[1]*/ = [ // func_body_suite
    a(2, 5), // NEWLINE
  ]
  var /* static arc */ arcs_88_4/*[1]*/ = [ // func_body_suite
    a(6, 6), // stmt
  ]
  var /* static arc */ arcs_88_5/*[1]*/ = [ // func_body_suite
    a(113, 4), // INDENT
  ]
  var /* static arc */ arcs_88_6/*[2]*/ = [ // func_body_suite
    a(6, 6), // stmt
    a(114, 1), // DEDENT
  ]
  var /* static state */ states_88/*[7]*/ = [ // func_body_suite
    s(arcs_88_0),
    s(arcs_88_1),
    s(arcs_88_2),
    s(arcs_88_3),
    s(arcs_88_4),
    s(arcs_88_5),
    s(arcs_88_6),
  ]
  states_88.d_name = "func_body_suite"
  var /* static arc */ arcs_89_0/*[1]*/ = [ // func_type_input
    a(182, 1), // func_type
  ]
  var /* static arc */ arcs_89_1/*[2]*/ = [ // func_type_input
    a(2, 1), // NEWLINE
    a(7, 2), // ENDMARKER
  ]
  var /* static arc */ arcs_89_2/*[1]*/ = [ // func_type_input
    a(0, 2), // EMPTY
  ]
  var /* static state */ states_89/*[3]*/ = [ // func_type_input
    s(arcs_89_0),
    s(arcs_89_1),
    s(arcs_89_2),
  ]
  states_89.d_name = "func_type_input"
  var /* static arc */ arcs_90_0/*[1]*/ = [ // func_type
    a(13, 1), // LPAR
  ]
  var /* static arc */ arcs_90_1/*[2]*/ = [ // func_type
    a(183, 2), // typelist
    a(15, 3), // RPAR
  ]
  var /* static arc */ arcs_90_2/*[1]*/ = [ // func_type
    a(15, 3), // RPAR
  ]
  var /* static arc */ arcs_90_3/*[1]*/ = [ // func_type
    a(25, 4), // RARROW
  ]
  var /* static arc */ arcs_90_4/*[1]*/ = [ // func_type
    a(26, 5), // test
  ]
  var /* static arc */ arcs_90_5/*[1]*/ = [ // func_type
    a(0, 5), // EMPTY
  ]
  var /* static state */ states_90/*[6]*/ = [ // func_type
    s(arcs_90_0),
    s(arcs_90_1),
    s(arcs_90_2),
    s(arcs_90_3),
    s(arcs_90_4),
    s(arcs_90_5),
  ]
  states_90.d_name = "func_type"
  var /* static arc */ arcs_91_0/*[3]*/ = [ // typelist
    a(26, 1), // test
    a(34, 2), // STAR
    a(35, 3), // DOUBLESTAR
  ]
  var /* static arc */ arcs_91_1/*[2]*/ = [ // typelist
    a(33, 4), // COMMA
    a(0, 1), // EMPTY
  ]
  var /* static arc */ arcs_91_2/*[3]*/ = [ // typelist
    a(26, 5), // test
    a(33, 6), // COMMA
    a(0, 2), // EMPTY
  ]
  var /* static arc */ arcs_91_3/*[1]*/ = [ // typelist
    a(26, 7), // test
  ]
  var /* static arc */ arcs_91_4/*[4]*/ = [ // typelist
    a(26, 1), // test
    a(34, 8), // STAR
    a(35, 3), // DOUBLESTAR
    a(0, 4), // EMPTY
  ]
  var /* static arc */ arcs_91_5/*[2]*/ = [ // typelist
    a(33, 6), // COMMA
    a(0, 5), // EMPTY
  ]
  var /* static arc */ arcs_91_6/*[2]*/ = [ // typelist
    a(26, 5), // test
    a(35, 3), // DOUBLESTAR
  ]
  var /* static arc */ arcs_91_7/*[1]*/ = [ // typelist
    a(0, 7), // EMPTY
  ]
  var /* static arc */ arcs_91_8/*[3]*/ = [ // typelist
    a(26, 9), // test
    a(33, 10), // COMMA
    a(0, 8), // EMPTY
  ]
  var /* static arc */ arcs_91_9/*[2]*/ = [ // typelist
    a(33, 10), // COMMA
    a(0, 9), // EMPTY
  ]
  var /* static arc */ arcs_91_10/*[2]*/ = [ // typelist
    a(26, 9), // test
    a(35, 3), // DOUBLESTAR
  ]
  var /* static state */ states_91/*[11]*/ = [ // typelist
    s(arcs_91_0),
    s(arcs_91_1),
    s(arcs_91_2),
    s(arcs_91_3),
    s(arcs_91_4),
    s(arcs_91_5),
    s(arcs_91_6),
    s(arcs_91_7),
    s(arcs_91_8),
    s(arcs_91_9),
    s(arcs_91_10),
  ]
  states_91.d_name = "typelist"
  var /* static dfa */ dfas/*[92]*/ = [
    d(256, "single_input", 0, 3, states_0,
      b(4, 40, 224, 0, 4, 0, 0, 0, 20, 124, 18, 14, 132, 37, 0, 33, 0, 0, 12, 137, 242, 33, 8, )),
    d(257, "file_input", 0, 2, states_1,
      b(132, 40, 224, 0, 4, 0, 0, 0, 20, 124, 18, 14, 132, 37, 0, 33, 0, 0, 12, 137, 242, 33, 8, )),
    d(258, "eval_input", 0, 3, states_2,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
    d(259, "decorator", 0, 7, states_3,
      b(0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(260, "decorators", 0, 2, states_4,
      b(0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(261, "decorated", 0, 3, states_5,
      b(0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(262, "async_funcdef", 0, 3, states_6,
      b(0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(263, "funcdef", 0, 9, states_7,
      b(0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(264, "parameters", 0, 4, states_8,
      b(0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(265, "typedargslist", 0, 23, states_9,
      b(0, 0, 128, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(266, "tfpdef", 0, 4, states_10,
      b(0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(267, "varargslist", 0, 19, states_11,
      b(0, 0, 128, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(268, "vfpdef", 0, 2, states_12,
      b(0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(269, "stmt", 0, 2, states_13,
      b(0, 40, 224, 0, 4, 0, 0, 0, 20, 124, 18, 14, 132, 37, 0, 33, 0, 0, 12, 137, 242, 33, 8, )),
    d(270, "simple_stmt", 0, 4, states_14,
      b(0, 32, 128, 0, 4, 0, 0, 0, 20, 124, 18, 14, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 8, )),
    d(271, "small_stmt", 0, 2, states_15,
      b(0, 32, 128, 0, 4, 0, 0, 0, 20, 124, 18, 14, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 8, )),
    d(272, "expr_stmt", 0, 6, states_16,
      b(0, 32, 128, 0, 4, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
    d(273, "annassign", 0, 5, states_17,
      b(0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(274, "testlist_star_expr", 0, 3, states_18,
      b(0, 32, 128, 0, 4, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
    d(275, "augassign", 0, 2, states_19,
      b(0, 0, 0, 0, 0, 0, 224, 255, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(276, "del_stmt", 0, 3, states_20,
      b(0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(277, "pass_stmt", 0, 2, states_21,
      b(0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(278, "flow_stmt", 0, 2, states_22,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, )),
    d(279, "break_stmt", 0, 2, states_23,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(280, "continue_stmt", 0, 2, states_24,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(281, "return_stmt", 0, 3, states_25,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(282, "yield_stmt", 0, 2, states_26,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, )),
    d(283, "raise_stmt", 0, 5, states_27,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(284, "import_stmt", 0, 2, states_28,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(285, "import_name", 0, 3, states_29,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(286, "import_from", 0, 8, states_30,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(287, "import_as_name", 0, 4, states_31,
      b(0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(288, "dotted_as_name", 0, 4, states_32,
      b(0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(289, "import_as_names", 0, 3, states_33,
      b(0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(290, "dotted_as_names", 0, 2, states_34,
      b(0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(291, "dotted_name", 0, 2, states_35,
      b(0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(292, "global_stmt", 0, 3, states_36,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(293, "nonlocal_stmt", 0, 3, states_37,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(294, "assert_stmt", 0, 5, states_38,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(295, "compound_stmt", 0, 2, states_39,
      b(0, 8, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 37, 0, 0, 0, 0, 0, 0, 0, 32, 0, )),
    d(296, "async_stmt", 0, 3, states_40,
      b(0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(297, "if_stmt", 0, 8, states_41,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(298, "while_stmt", 0, 8, states_42,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(299, "for_stmt", 0, 11, states_43,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(300, "try_stmt", 0, 13, states_44,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(301, "with_stmt", 0, 6, states_45,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(302, "with_item", 0, 4, states_46,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
    d(303, "except_clause", 0, 5, states_47,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(304, "suite", 0, 5, states_48,
      b(4, 32, 128, 0, 4, 0, 0, 0, 20, 124, 18, 14, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 8, )),
    d(305, "namedexpr_test", 0, 4, states_49,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
    d(306, "test", 0, 6, states_50,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
    d(307, "test_nocond", 0, 2, states_51,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
    d(308, "lambdef", 0, 5, states_52,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, )),
    d(309, "lambdef_nocond", 0, 5, states_53,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, )),
    d(310, "or_test", 0, 2, states_54,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 32, 0, 0, 12, 137, 242, 1, 0, )),
    d(311, "and_test", 0, 2, states_55,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 32, 0, 0, 12, 137, 242, 1, 0, )),
    d(312, "not_test", 0, 3, states_56,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 32, 0, 0, 12, 137, 242, 1, 0, )),
    d(313, "comparison", 0, 2, states_57,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 12, 137, 242, 1, 0, )),
    d(314, "comp_op", 0, 4, states_58,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 32, 255, 0, 0, 0, 0, 0, 0, )),
    d(315, "star_expr", 0, 3, states_59,
      b(0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(316, "expr", 0, 2, states_60,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 12, 137, 242, 1, 0, )),
    d(317, "xor_expr", 0, 2, states_61,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 12, 137, 242, 1, 0, )),
    d(318, "and_expr", 0, 2, states_62,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 12, 137, 242, 1, 0, )),
    d(319, "shift_expr", 0, 2, states_63,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 12, 137, 242, 1, 0, )),
    d(320, "arith_expr", 0, 2, states_64,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 12, 137, 242, 1, 0, )),
    d(321, "term", 0, 2, states_65,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 12, 137, 242, 1, 0, )),
    d(322, "factor", 0, 3, states_66,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 12, 137, 242, 1, 0, )),
    d(323, "power", 0, 4, states_67,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 136, 242, 1, 0, )),
    d(324, "atom_expr", 0, 3, states_68,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 136, 242, 1, 0, )),
    d(325, "atom", 0, 9, states_69,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 128, 242, 1, 0, )),
    d(326, "testlist_comp", 0, 5, states_70,
      b(0, 32, 128, 0, 4, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
    d(327, "trailer", 0, 7, states_71,
      b(0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, )),
    d(328, "subscriptlist", 0, 3, states_72,
      b(0, 32, 128, 8, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
    d(329, "subscript", 0, 5, states_73,
      b(0, 32, 128, 8, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
    d(330, "sliceop", 0, 3, states_74,
      b(0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(331, "exprlist", 0, 3, states_75,
      b(0, 32, 128, 0, 4, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 12, 137, 242, 1, 0, )),
    d(332, "testlist", 0, 3, states_76,
      b(0, 32, 128, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
    d(333, "dictorsetmaker", 0, 14, states_77,
      b(0, 32, 128, 0, 12, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
    d(334, "classdef", 0, 8, states_78,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, )),
    d(335, "arglist", 0, 3, states_79,
      b(0, 32, 128, 0, 12, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
    d(336, "argument", 0, 4, states_80,
      b(0, 32, 128, 0, 12, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
    d(337, "comp_iter", 0, 2, states_81,
      b(0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(338, "sync_comp_for", 0, 6, states_82,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(339, "comp_for", 0, 3, states_83,
      b(0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(340, "comp_if", 0, 4, states_84,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(341, "encoding_decl", 0, 2, states_85,
      b(0, 0, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(342, "yield_expr", 0, 3, states_86,
      b(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, )),
    d(343, "yield_arg", 0, 3, states_87,
      b(0, 32, 128, 0, 4, 0, 0, 0, 0, 64, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
    d(344, "func_body_suite", 0, 7, states_88,
      b(4, 32, 128, 0, 4, 0, 0, 0, 20, 124, 18, 14, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 8, )),
    d(345, "func_type_input", 0, 3, states_89,
      b(0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(346, "func_type", 0, 6, states_90,
      b(0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, )),
    d(347, "typelist", 0, 11, states_91,
      b(0, 32, 128, 0, 12, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 33, 0, 0, 12, 137, 242, 1, 0, )),
  ]
  var /* static label */ labels/*[184]*/ = [
    l(0, "EMPTY"),
    l(256), // single_input
    l(4), // NEWLINE
    l(270), // simple_stmt
    l(295), // compound_stmt
    l(257), // file_input
    l(269), // stmt
    l(0), // ENDMARKER
    l(258), // eval_input
    l(332), // testlist
    l(259), // decorator
    l(49), // AT
    l(291), // dotted_name
    l(7), // LPAR
    l(335), // arglist
    l(8), // RPAR
    l(260), // decorators
    l(261), // decorated
    l(334), // classdef
    l(263), // funcdef
    l(262), // async_funcdef
    l(1, "async"),
    l(1, "def"),
    l(1), // NAME
    l(264), // parameters
    l(51), // RARROW
    l(306), // test
    l(11), // COLON
    l(56), // TYPE_COMMENT
    l(344), // func_body_suite
    l(265), // typedargslist
    l(266), // tfpdef
    l(22), // EQUAL
    l(12), // COMMA
    l(16), // STAR
    l(35), // DOUBLESTAR
    l(267), // varargslist
    l(268), // vfpdef
    l(271), // small_stmt
    l(13), // SEMI
    l(272), // expr_stmt
    l(276), // del_stmt
    l(277), // pass_stmt
    l(278), // flow_stmt
    l(284), // import_stmt
    l(292), // global_stmt
    l(293), // nonlocal_stmt
    l(294), // assert_stmt
    l(274), // testlist_star_expr
    l(273), // annassign
    l(275), // augassign
    l(342), // yield_expr
    l(315), // star_expr
    l(36), // PLUSEQUAL
    l(37), // MINEQUAL
    l(38), // STAREQUAL
    l(50), // ATEQUAL
    l(39), // SLASHEQUAL
    l(40), // PERCENTEQUAL
    l(41), // AMPEREQUAL
    l(42), // VBAREQUAL
    l(43), // CIRCUMFLEXEQUAL
    l(44), // LEFTSHIFTEQUAL
    l(45), // RIGHTSHIFTEQUAL
    l(46), // DOUBLESTAREQUAL
    l(48), // DOUBLESLASHEQUAL
    l(1, "del"),
    l(331), // exprlist
    l(1, "pass"),
    l(279), // break_stmt
    l(280), // continue_stmt
    l(281), // return_stmt
    l(283), // raise_stmt
    l(282), // yield_stmt
    l(1, "break"),
    l(1, "continue"),
    l(1, "return"),
    l(1, "raise"),
    l(1, "from"),
    l(285), // import_name
    l(286), // import_from
    l(1, "import"),
    l(290), // dotted_as_names
    l(23), // DOT
    l(52), // ELLIPSIS
    l(289), // import_as_names
    l(287), // import_as_name
    l(1, "as"),
    l(288), // dotted_as_name
    l(1, "global"),
    l(1, "nonlocal"),
    l(1, "assert"),
    l(297), // if_stmt
    l(298), // while_stmt
    l(299), // for_stmt
    l(300), // try_stmt
    l(301), // with_stmt
    l(296), // async_stmt
    l(1, "if"),
    l(305), // namedexpr_test
    l(304), // suite
    l(1, "elif"),
    l(1, "else"),
    l(1, "while"),
    l(1, "for"),
    l(1, "in"),
    l(1, "try"),
    l(303), // except_clause
    l(1, "finally"),
    l(1, "with"),
    l(302), // with_item
    l(316), // expr
    l(1, "except"),
    l(5), // INDENT
    l(6), // DEDENT
    l(53), // COLONEQUAL
    l(310), // or_test
    l(308), // lambdef
    l(307), // test_nocond
    l(309), // lambdef_nocond
    l(1, "lambda"),
    l(311), // and_test
    l(1, "or"),
    l(312), // not_test
    l(1, "and"),
    l(1, "not"),
    l(313), // comparison
    l(314), // comp_op
    l(20), // LESS
    l(21), // GREATER
    l(27), // EQEQUAL
    l(30), // GREATEREQUAL
    l(29), // LESSEQUAL
    l(28), // NOTEQUAL
    l(28), // NOTEQUAL
    l(1, "is"),
    l(317), // xor_expr
    l(18), // VBAR
    l(318), // and_expr
    l(32), // CIRCUMFLEX
    l(319), // shift_expr
    l(19), // AMPER
    l(320), // arith_expr
    l(33), // LEFTSHIFT
    l(34), // RIGHTSHIFT
    l(321), // term
    l(14), // PLUS
    l(15), // MINUS
    l(322), // factor
    l(17), // SLASH
    l(24), // PERCENT
    l(47), // DOUBLESLASH
    l(31), // TILDE
    l(323), // power
    l(324), // atom_expr
    l(1, "await"),
    l(325), // atom
    l(327), // trailer
    l(326), // testlist_comp
    l(9), // LSQB
    l(10), // RSQB
    l(25), // LBRACE
    l(333), // dictorsetmaker
    l(26), // RBRACE
    l(2), // NUMBER
    l(3), // STRING
    l(1, "None"),
    l(1, "True"),
    l(1, "False"),
    l(339), // comp_for
    l(328), // subscriptlist
    l(329), // subscript
    l(330), // sliceop
    l(1, "class"),
    l(336), // argument
    l(337), // comp_iter
    l(340), // comp_if
    l(338), // sync_comp_for
    l(341), // encoding_decl
    l(1, "yield"),
    l(343), // yield_arg
    l(345), // func_type_input
    l(346), // func_type
    l(347), // typelist
  ]
  eYo.py.gmr._pyParser_Grammar = new eYo.py.gmr.Book(
    dfas,
    labels,
    256
  )
})()
